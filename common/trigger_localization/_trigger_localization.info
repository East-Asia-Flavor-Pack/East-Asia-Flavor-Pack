=== Structure ===

my_trigger = {
	# One or more of these rules:
	global = <localization_key>	# no pronoun ("Is an adult", used for example inside any triggers)
	first = <localization_key>	# first person ("I am an adult")
	third = <localization_key>	# third person ("[CHARACTER.GetName] is an adult")
	# If the requested entry is not available, the system will fall back to the _last_ available one.

	# <localization_key> requires a positive version ("<localization_key>") and a negative version ("NOT_<localization_key>", used inside NOT triggers).
	# Optionally, the negative version key can be overridden using
	# <rule>_not = <localization_key>	# e.g. global_not = TRIGGER_OR
}

== Examples ==

# is_betrothed = yes
is_betrothed = {
	global = IS_BETROTHED_TRIGGER
	first = I_AM_BETROTHED_TRIGGER
	third = THEY_ARE_BETROTHED_TRIGGER

	# expected localization keys: IS_BETROTHED_TRIGGER, NOT_IS_BETROTHED_TRIGGER, I_AM_BETROTHED_TRIGGER, NOT_I_AM_BETROTHED_TRIGGER, THEY_ARE_BETROTHED_TRIGGER, NOT_THEY_ARE_BETROTHED_TRIGGER
}

is_betrothed = {
	global = IS_BETROTHED_TRIGGER
	third = THEY_ARE_BETROTHED_TRIGGER

	# expected localization keys: IS_BETROTHED_TRIGGER, NOT_IS_BETROTHED_TRIGGER
	# If a first person localization is requested, it will deliver the third person instead (since it is last in the list).
}

and = {
	global = TRIGGER_AND
	global_not = TRIGGER_OR

	# expected localization keys: TRIGGER_AND, TRIGGER_OR
}

only_negative_form_used = {
	first_not = I_AM_NOT_A_CHILD

	# expected localization keys: I_AM_NOT_A_CHILD
}

=== Value Comparison Triggers ===

Example trigger usage: dread >= 50

You can use a basic version that covers all cases, as well as specialize the localization depending on comparison operator.
Either way you have access to $COMPARATOR$ ("greater than", "equal to", ...) and $NUM$ (the value).

dread = {
	third = THEIR_DREAD_TRIGGER		# "[CHARACTER.GetFirstNamePossessiveOrMy] Dread is $COMPARATOR$ $NUM$"
}
gold_greater_or_equal = {
	third = THEY_HAVE_GOLD_TRIGGER	# "[CHARACTER.GetTitledFirstName] has $NUM$ Gold"
}

Available comparator specializations:
	=	checks <trigger>_equal
	>	checks <trigger>_greater_than
	>=	checks <trigger>_greater_or_equal
	<	checks <trigger>_less_than
	<=	checks <trigger>_less_or_equal
If a specialization is not available, it falls back to the generic version ("<trigger>")

=== Scope Comparison Triggers ===

Example trigger usage: scope:actor.mother.betrothed = scope:recipient.liege

The left-hand-side expression is split into two parts:
1) Everything before the last . will become the "subject" of the localization (scope:actor.mother in the example).
2) Everything after the last . will determine the localization entry used (<key>_equal, betrothed_equal in the example).
The right-hand-side expression is the "object" of the localization (scope:recipient.liege in the example).

betrothed_equal = {
	third = BETROTHED_EQUAL_THIRD	# "[CHARACTER.GetShortUIName|U] is betrothed to [TARGET_CHARACTER.GetShortUIName]"
									# "<scope:actor.mother> is betrothed to <scope:recipient.liege>"
}

While the example above is a bit more complex than the usual comparison, it could still happen that the expression on the left or right side are too complex for the player to understand what is going on. ("Why betrothed to Harold? He's not in the interaction?")
In that case you should resort to custom descriptions.

=== "Any" Triggers ===

There are several different kinds of "Any" triggers.
The negative checks are a bit different, see 'Negative "Any" Triggers' below.

== Regular "Any" Trigger ==

The regular any trigger uses the localization key from its name:

# any_child = { <triggers> }
any_child = {
	third = ANY_CHILD_THIRD		# "Any of [CHARACTER.GetShortUINamePossessive] Children:"
}

== Special "Any" Trigger: With "count" or "percent" ==

Append "_count" or "_percent" to the localization key.

# any_child = { count >= 5	<triggers> }
any_child_count = {
	third = COUNT_GT_EQ_CHILDREN_THIRD		# "$PARAMETERS$ of [CHARACTER.GetShortUINamePossessive] children"
											# $PARAMETERS$ is available when a percentage is checked.
}

$PARAMETERS$ is built based on the operator suffixes, the same ones mentioned in 'Value Comparison Triggers' above, automatically.
There is one additional operator suffix, "_not_equal", which is used when a "count = X" is in a negative any trigger check. See also 'Negative "Any" Triggers' below.

== Special "Any" Trigger: "All" ==

Append "_all" to the localization key:

# any_child = { count = all	<triggers> }
any_child_all = {
	third = ALL_CHILDREN_THIRD		# "All of [CHARACTER.GetShortUINamePossessive] Children:"
}

== Negative "Any" Triggers ==

There are no "not" versions for these localization strings. Instead the any trigger gets inverted if the check is negative.

not regular any -> all, children are inverted
not all -> regular any, children are inverted
not count/percent -> count/percent, operator is inverted

Examples:

NOT = { any_child = {					  is_married = yes is_adult = yes } }
->	  any_child = { count = all NAND = { is_married = yes is_adult = yes } }
☑ All of my Children:
  • At least one of these:
	• Is not married
	• Is not an adult

NOT = { any_child = { count >= 3	is_married = yes } }
->	  any_child = { count <  3	is_married = yes }
☑ Less than 3 of my Children:
  • Is married
