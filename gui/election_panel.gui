# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types election_panel_types
{
	type election_ig_list = flowcontainer {
		parentanchor = hcenter
		direction = vertical
		block "datamodel" {
			datamodel = "[Party.GetMembers]"
		}

		item = {
			widget = {
				size = { 510 60 }
				
				background = {
					texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
					color = "[InterestGroup.GetColor]"
					alpha = 0.2
					
					modify_texture = {
						using = texture_velvet
					}
				}
				
				divider_clean = {
					parentanchor = bottom
				}
				
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					spacing = 5
					
					ig_button = {
						size = { 50 50 }
						blockoverride "in_government_icon" {}
					}
					
					textbox = {
						layoutstretchfactor_horizontal = 4
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						text = "[InterestGroup.GetName]"
						align = nobaseline
						using = fontsize_large
						elide = right
						fontsize_min = 14
					}
					
					vbox = {
						layoutstretchfactor_horizontal = 4
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[GreaterThan_CFixedPoint( InterestGroup.GetAffiliationRaw, '(CFixedPoint)0' )]"

						textbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							text = "PARTY_AFFILIATION"
							using = fontsize_small
							margin_left = 20
							align = nobaseline
							elide = right
						}

						textbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							text = "[InterestGroup.GetAffiliationRaw|+=0]"
							tooltip = "[InterestGroup.GetAffiliationBreakdown]"
							margin_left = 20
							margin_bottom = 10
							align = nobaseline
							elide = right
							default_format = "#variable"
						}
					}
					
					vbox = {
                        layoutstretchfactor_horizontal = 4
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        textbox = {
                            visible = no #this is not properly aligned
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding
                            text = "IG_VOTERS_TITLE"
                            align = nobaseline
                            elide = right
                        }

                        textbox = {
                            layoutstretchfactor_horizontal = 3
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding
                            using = clout_tooltip_with_graph
							raw_text = "#BOLD [InterestGroup.GetClout|1%] #!"
							align = right|nobaseline
                            elide = right
                            using = fontsize_large
                        }
                    }
				}
			}
		}
	}
	
	type election_panel = default_block_window_two_lines {
		name = "election_panel"
		datacontext = "[ElectionPanel.GetElection]"

		blockoverride "window_header_name" {
			text = "ELECTION_PANEL_HEADER_LINE_ONE"
		}
		blockoverride "window_header_name_line_two"
		{
			text = "ELECTION_PANEL_HEADER_LINE_TWO"
		}
		
		blockoverride "scrollarea_content" {
			flowcontainer = {
				margin_top = 10
				using = default_list_position
				direction = vertical
				spacing = 10
				
				background = {
					visible = "[Election.IsInCampaignPeriod]"
					texture = "gfx/interface/illustrations/government/government_illustration.dds"
					alpha = 0.15
					fittype = start
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}
				
				### ELECTION DATE
				widget = {
					visible = "[Election.IsInCampaignPeriod]"
					size = { @panel_width_minus_10 80 }
					parentanchor = hcenter
					using = entry_bg_fancy

					flowcontainer = {
						direction = vertical
						parentanchor = center
						
						textbox = {
							text = "DATE_OF_ELECTION"
							autoresize = yes
							parentanchor = hcenter
							align = nobaseline
						}
						textbox = {
							text = "[Election.GetDateFormatted]"
							autoresize = yes
							parentanchor = hcenter
							using = fontsize_large
							align = nobaseline
							default_format = "#v"
						}
					}
				}

				### GRAPH
				v3_plotline = {
					visible = "[Election.IsInCampaignPeriod]"
					parentanchor = hcenter
					blockoverride "size" {
						size = { 440 150 }
					}
					blockoverride "header" {
						text = "VOTES_GRAPH_TITLE"
					}
					blockoverride "datamodel" {
						datamodel = "[AccessPlayer.AccessActiveParties]"
					}
					blockoverride "line_color" {
						color = "[Party.GetColor]"
					}
					blockoverride "line_plotpoints" {
						visible = "[Not(IsEmpty(Party.GetElectionVotesTrend))]"
						plotpoints = "[GetTrendPlotPointsNormalized( Party.GetElectionVotesTrend, '(CFixedPoint)0', Election.GetVotesGraphMax )]"
					}
					blockoverride "maxvalue" {
						text = "[Election.GetVotesGraphMax|D]"
					}
					blockoverride "minvalue" {
						raw_text = "0%"
					}
					blockoverride "startdate" {
						text = "[Election.GetVotesGraphDateStart]"
					}
					blockoverride "enddate" {
						text = "[Election.GetVotesGraphDateEnd]"
					}
					blockoverride "singleitem" {}

					blockoverride "tooltip" {
						tooltipwidget = {
							FancyTooltip_Party = {}
						}
					}
					blockoverride "empty_state_visibility" {
						visible = "[Not(AccessPlayer.HasElectionTrendData)]"
					}

					blockoverride "everything_that_is_not_empty_state_visibility" {
						visible = "[AccessPlayer.HasElectionTrendData]"
					}

					blockoverride "empty_state_text" {
						text = "GRAPH_NOT_INITIALIZED"
					}
				}
				
				### INFO
				flowcontainer = {
					visible = "[Election.IsInCampaignPeriod]"
					parentanchor = hcenter
					spacing = 20
					margin_top = 10
					margin_bottom = 10

					law_item_small = {
						datacontext = "[AccessPlayer.AccessActiveLawFromGroup('lawgroup_distribution_of_power')]"
					}

					flowcontainer = {
						direction = vertical
						parentanchor = hcenter
						
						widget = {
							size = { 240 40 }
							
							hbox = {
								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 30 }
									text = "TOTAL_VOTERS"
									elide = right
									fontsize_min = 14
								}
								textbox = {
									text = "[Election.GetTotalVotersRaw|K]"
									autoresize = yes
									default_format = "#variable"
								}
							}
							divider_clean = {
								parentanchor = bottom|hcenter
							}
						}
						widget = {
							size = { 240 40 }
							
							hbox = {
								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 30 }
									text = "POLITICALLY_UNALIGNED"
									elide = right
								}
								textbox = {
									text = "[Election.GetCountry.GetInactivePopulation|kv]"
									tooltip = "POLITICALLY_UNALIGNED_POPULATION_TOOLTIP"
									autoresize = yes
									default_format = "#variable"
								}
							}
							divider_clean = {
								parentanchor = bottom|hcenter
							}
						}
					}
				}

				### PARTIES
				default_header = {
					visible = "[Election.IsInCampaignPeriod]"
					blockoverride "text" {
						text = "PARTIES"
					}
				}
				
				# party list with igs
				flowcontainer = {
					visible = "[Election.IsInCampaignPeriod]"
					direction = vertical
					parentanchor = hcenter
					datamodel = "[Election.GetParties]"
					spacing = 10
					
					item = {
						flowcontainer = {
							minimumsize = { @panel_width_minus_10 -1 }
							maximumsize = { @panel_width_minus_10 -1 }
							parentanchor = hcenter
							direction = vertical
							margin_bottom = 5
							
							background = {
								using = simple_frame
							}
							
							# party header
							container = {
								minimumsize = { @panel_width_minus_10 -1 }
								maximumsize = { @panel_width_minus_10 -1 }
								
								background = {
									texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
									color = "[Party.GetColor]"
									alpha = 0.5
									mirror = horizontal
									
									modify_texture = {
										using = texture_velvet
									}
								}
								
								# party + momentum
								flowcontainer = {
									margin = { 10 10 }
									spacing = 10
									
									icon = {
										texture = "[Party.GetIcon]"
										size = { 50 50 }
									}
									
									flowcontainer = {
										direction = vertical
										
										flowcontainer = {
											spacing = 10
											textbox = {
												text = "[Party.GetName]"
												autoresize = yes
												align = nobaseline
												using = fontsize_xl
											}
											
											icon = {
												visible = "[Party.IsInGovernment]"
												texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
												size = { 20 20 }
												parentanchor = vcenter
											}
										}
										
										textbox = {
											text = "[concept_momentum]: [Party.GetMomentum|v%0]"
											tooltip = "[Party.GetMomentumDesc]"
											autoresize = yes
											align = nobaseline
										}
									}
								}
								
								# projected votes
								flowcontainer = {
									margin = { 10 10 }
									direction = vertical
									parentanchor = right
									
									textbox = {
										parentanchor = right
										text = "PROJECTED_VOTES_TITLE"
										autoresize = yes
										align = nobaseline
									}
									
									flowcontainer = {
										parentanchor = right
										tooltip = "PROJECTED_VOTES_TOOLTIP"
										spacing = 7
										textbox = {
											raw_text = "[Party.GetProjectedVotesDesc]"
											autoresize = yes
											align = nobaseline
											using = fontsize_xl
										}
										textbox = {
											parentanchor = vcenter
											raw_text = "([Party.GetCurrentPollVotingPowerDifference|K+=])"
											autoresize = yes
											align = nobaseline
										}
									}
								}
							}

							### DROPDOWN / EXPAND
							section_header_button = {
								size = { 500 40 }

								blockoverride "left_text" {
									text = "INTEREST_GROUPS"
								}

								blockoverride "fontsize" {}

								blockoverride "right_text" {
									flowcontainer = {
										visible = "[Not(GetVariableSystem.Exists(Party.GetName))]"
										margin = { 5 0 }
										spacing = 10
										datamodel = "[Party.GetMembers]"
											
                                        item = {
                                            ig_button = {
                                                size = { 30 30 }
                                                blockoverride "in_government_icon" {}
                                            }
                                        }
									}
								}

								blockoverride "onclick" {
									onclick = "[GetVariableSystem.Toggle(Party.GetName)]"
								}
								
								blockoverride "onclick_showmore" {
									visible = "[Not(GetVariableSystem.Exists(Party.GetName))]"
								}

								blockoverride "onclick_showless" {
									visible = "[GetVariableSystem.Exists(Party.GetName)]"
								}
							}

							election_ig_list = {
								visible = "[GetVariableSystem.Exists(Party.GetName)]"
							}
						}
					}
				}
				
				# igs outside of parties
				election_ig_list = {
					margin_top = 15
					blockoverride "datamodel" {
						#datamodel = [Election.GetIndependentIGs] #TODO PRCAL-15550: this lacks a group
					}
				}
				
				### LAST ELECTION RESULTS
				flowcontainer = {
					direction = vertical
					margin_top = 30
					spacing = 5
					
					section_header_button = {
						blockoverride "left_text" {
							text = "LAST_ELECTION_RESULTS"
						}

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Toggle('last_election_results_expanded')]"
						}
						
						blockoverride "onclick_showmore" {
							visible = "[Not(GetVariableSystem.Exists('last_election_results_expanded'))]"
						}

						blockoverride "onclick_showless" {
							visible = "[GetVariableSystem.Exists('last_election_results_expanded')]"
						}
					}
					
					fixedgridbox = {
						visible = "[GetVariableSystem.Exists('last_election_results_expanded')]"
						datamodel = "[AccessPlayer.AccessLastElectionParties]"
						flipdirection = yes
						parentanchor = hcenter
						
						addcolumn = 180
						addrow = 85
						datamodel_wrap = 3

						item = {
                            widget = {
								size = { 175 80 }
								
								background = {
									using = entry_bg_simple
								}
								
								vbox = {
									margin = { 5 5 }
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									
									icon = {
										texture = "[Party.GetIcon]"
										size = { 40 40 }
									}
									textbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										raw_text = "[Party.GetCurrentVotingPowerShare|%1]"
										tooltip = "PARTY_ELECTION_TOOLTIP"
										align = center|nobaseline
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
