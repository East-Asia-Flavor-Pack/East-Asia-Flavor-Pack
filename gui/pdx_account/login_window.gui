### this is an imported file. please make as little changes to this file as possible.
### when you make a change please mark it very clearly using a pair of comment lines with the text '### v3' and '### to here'
### texture paths and audio event ids are an exception to this and can be changed without marking

types SDK
{
	type login_window = window {
		name = "login_window"
		size = { 100% 100% }
		movable = no
		layer = confirmation

		using = Animation_ShowHide_Quick
		using = Background_Full_Dim

		button = {
			size = { 100% 100% }
			onclick = "[LoginView.Hide]"
			### v3
			using = close_button_sound
			### to here 
		}

		widget = {
			size = { 600 400 }
			parentanchor = center
			alwaystransparent = no

			using = Window_Decoration_Spike
			using = Window_Background

			widget = {
				position = { 45 20 }
				allow_outside = yes

				highlight_icon = {
					size = { 44 44 }
					texture = "gfx/frontend/interface/icons/flat_icons/account.dds"
					alpha = 0.4
					using = Master_Button_Modify_Texture

					blockoverride "master_color_frame" {
						frame = 4
					}
				}
			}

			vbox = {
				using = Window_Margins
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				vbox = {
					name = "log_in"
					visible = "[LoginView.IsLogin]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					margin_bottom = 5

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "POPS_LOGIN"
						}

						blockoverride "button_close"
						{
							onclick = "[LoginView.Hide]"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 500 0 }
						spacing = 5
						margin = { 20 10 }

						sdk_textbox_entry = {
							name = "sdk_login_entry_email"
							layoutpolicy_horizontal = expanding

							blockoverride "title"
							{
								text = "EMAIL"
							}
							blockoverride "editbox_properties" 
							{
							    name = "sdk_editbox"
							    text = "[LoginView.GetEmail]"
							    ontextchanged = "[LoginView.SetEmail]"
							    onreturnpressed = "[LoginView.Login]"
							    maxcharacters = 255
							    focus_on_visible = yes
							}
						}

						sdk_textbox_entry = {
							name = "sdk_login_entry_password"
							layoutpolicy_horizontal = expanding

							blockoverride "title"
							{
								text = "PASSWORD"
							}

							blockoverride "editbox_properties" 
							{
							    name = "sdk_editbox"
							    text = "[LoginView.GetPassword]"
							    ontextchanged = "[LoginView.SetPassword]"
								onreturnpressed = "[LoginView.Login]"
								password = yes
							}
						}

						text_multi = {
							raw_text = "#X [LoginView.GetErrorMessage] #!"
							visible = "[Not(StatusIsLoggingIn)]"
							multiline = yes
							layoutpolicy_horizontal = expanding
							align = center
							autoresize = yes
							max_width = 500
						}

						expand = {
							layoutpolicy_vertical = expanding
							visible = "[Not(StatusIsLoggingIn)]"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[And(Not(StatusIsLoggingIn), Not(StatusIsLoggedIn))]"
							spacing = 10

							button_tertiary = {
								text = "POPS_LOGIN_RESET_PASSWORD"
								onclick = "[LoginView.SetState( 'password_reset' )]"
							}

							expand = {}

							### v3 action button
							button = {
								using = default_button_primary_action
								size = { 170 33 }
							#button_primary = {
								text = "[LoginView.GetLoginString]"
								layoutpolicy_horizontal = fixed
								enabled = "[LoginView.IsValidLoginInfo]"
								onclick = "[LoginView.Login]"
							}
						}

						### ANIMATIONS ####
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							visible = "[StatusIsLoggingIn]"
							hbox = {
								spacing = 5

								text_single = {
									text = "LOGGING_IN"
								}

								sdk_load_indicator = {
									blockoverride "load_indicator"
									{
										visible = yes
									}
								}
							}

							background = {
								using = Background_Area_Border
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						visible = "[And(Not(StatusIsLoggingIn), StatusIsLoggedIn)]"

						text_single = {
							text = "POPS_LOGIN_LOGGED_IN"
						}

						button_standard = {
							text = "CLOSE_LABEL"
							layoutpolicy_horizontal = fixed
							onclick = "[LoginView.Hide]"
						}

						background = {
							using = Background_Area_Border_Solid
						}
					}

					### CREATE ACCOUNT ###
					hbox = {
						visible = "[And(And(Not(LoginView.IsRestoringPassword), Not(StatusIsLoggedIn)), Not(LoginView.IsEmailSent))]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }

						background = {
							using = Background_Area
							margin = { -10 0 }
						}

						text_multi = {
							layoutpolicy_horizontal = expanding
							text = "POPS_CREATE_ACCOUNT_CREARE_SUGGESTION"
							align = nobaseline
						}

						expand = {}

						### v3 action button
						button = {
							using = default_button_action
							size = { 170 33 }
						#button_standard = {
							text = "CREATE_ACCOUNT"
							onclick = "[OnCreateAccount]"
						}
					}
				}

				vbox = {
					name = "forgot_password"
					visible = "[LoginView.IsRestoringPassword]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "POPS_FORGOT_PASSWORD"
						}

						blockoverride "button_close"
						{
							onclick = "[LoginView.Hide]"
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }
						spacing = 5

						vbox = {
							layoutpolicy_vertical = expanding
							text_multi = {
								layoutpolicy_horizontal = expanding
								autoresize = yes
								max_width = 500
								text = "POPS_LOGIN_RESET_PASSWORD_DESC"
							}

							spacer = {
								size = { -1 20 }
							}

							sdk_textbox_entry = {
								name = "sdk_login_entry_email"
								layoutpolicy_horizontal = expanding

								blockoverride "title"
								{
									text = "EMAIL"
								}

								blockoverride "editbox_properties" 
								{
								    name = "sdk_editbox"
								    text = "[LoginView.GetEmail]"
								    ontextchanged = "[LoginView.SetEmail]"
									onreturnpressed = "[LoginView.ResetPassword]"
									maxcharacters = 255
								}
								block "editbox_size"
								{
									size = { 100 0 }
								}
							}

							expand = {
							}
						}


						hbox = {
							spacing = 10

							button_standard = {
								text = "CANCEL"
								onclick = "[LoginView.SetState( 'login' )]"
							}

							### v3 action button
							button = {
								using = default_button_primary_action
								size = { 170 33 }
							#button_standard = {
								text = "POPS_LOGIN_RESET_PASSWORD_SEND"
								onclick = "[LoginView.ResetPassword]"
								onclick = "[LoginView.SetState( 'email_sent' )]"
							}
						}
					}
				}

				vbox = {
					name = "forgot_password_sent"
					visible = "[LoginView.IsEmailSent]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "POPS_FORGOT_PASSWORD"
						}

						blockoverride "button_close"
						{
							onclick = "[LoginView.Hide]"
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						spacing = 5
						margin = { 20 10 }

						text_multi = {
							layoutpolicy_horizontal = expanding
							max_width = 500
							autoresize = yes
							text = "POPS_LOGIN_RESET_PASSWORD_EMAIL_SENT"
						}

						expand = {}

						button_standard = {
							text = "BACK_LABEL"
							layoutpolicy_horizontal = fixed
							onclick = "[LoginView.SetState( 'login' )]"
						}
					}
				}

				vbox = {
					name = "account_info"
					visible = "[LoginView.IsLoggedIn]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "PARADOX_ACCOUNT"
						}

						blockoverride "button_close"
						{
							onclick = "[LoginView.Hide]"
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 20 10 }

						spacer = {
							size = { -1 20 }
						}

						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							vbox = {
								layoutpolicy_horizontal = expanding
								maximumsize = { 350 0 }
								spacing = 15

								vbox = {
									layoutpolicy_horizontal = expanding
									spacing = 2

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 5

										text_single = {
											text = "EMAIL"
											align = nobaseline
										}

										text_single = {
											raw_text = ":"
											align = nobaseline
										}

										expand = {}
									}

									widget = {
										size = { 500 35 }

										background = {
											using = entry_bg_simple
											alpha = 0.7
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_left = 10
											spacing = 5
											background = {
												using = entry_bg_simple
												alpha = 0.7
											}

											text_single = {
												default_format = "#high"
												text = "[StatusGetUserEmailMasked]"
												align = left|nobaseline
												max_width = 450
												elide = right
											}

											expand = {}
										}
									}

								}

								vbox = {
									layoutpolicy_horizontal = expanding
									spacing = 2

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 5

										hbox = {
											text_single = {
												text = "USER_NAME"
												align = nobaseline
											}

											text_single = {
												raw_text = ":"
												align = nobaseline
											}
										}

										expand = {}
									}

									widget = {
										size = { 500 35 }

										background = {
											using = entry_bg_simple
											alpha = 0.7
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_left = 10
											spacing = 10
											visible = "[Not( StatusIsUserNameEmpty )]"

											text_single = {
												default_format = "#high"
												text = "[StatusGetUserName]"
												align = nobaseline
												max_width = 450
												elide = right
											}

											button_change = {
												size = { 24 24 }
												onclick = "[LoginView.SetState( 'change_username' )]"
											}

											expand = {}
										}

										hbox = {
											visible = "[StatusIsUserNameEmpty]"

											button_standard = {
												text = "POPS_LOGIN_ADD_USER_NAME"
												onclick = "[LoginView.SetState( 'change_username' )]"
											}
										}
									}
								}

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10
										visible = "[And( StatusIsLoggedIn, StatusIsSupportConnectedAccount )]"

										button_checkbox = {
											visible = "[Not( LoginView.IsConnectingAccount )]"
											size = { 24 24 }
											checked = "[StatusIsAccountConnected]"
											onclick = "[LoginView.ToggleConnected]"
										}

										sdk_load_indicator = {
											size = { 24 24 }
											visible = "[LoginView.IsConnectingAccount]"
											blockoverride "load_indicator"
											{
												visible = yes
											}
										}

										text_single = {
											text = "POPS_LOGIN_BIND_STEAM"
											align = nobaseline
										}

										expand = {}
									}

								text_multi = {
									raw_text = "#X [LoginView.GetErrorMessage] #!"
									multiline = yes
									layoutpolicy_horizontal = expanding
									align = center
									autoresize = yes
									max_width = 500
								}
							}

							expand = {}

							hbox = {
								spacing = 10

								button_standard = {
									text = "CLOSE_LABEL"
									layoutpolicy_horizontal = fixed
									onclick = "[LoginView.Hide]"
								}

								button_standard = {
									text = "LOGOUT"
									onclick = [LoginView.Logout]
									onclick = "[LoginView.SetState( 'login' )]"
								}
							}
						}
					}
				}

				vbox = {
					name = "change_username"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					visible = "[LoginView.IsChangingUserName]"

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "PDX_USERNAME"
						}

						blockoverride "button_close"
						{
							onclick = "[LoginView.Hide]"
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }

						text_multi = {
							text = "POPS_LOGIN_CHANGE_USER_NAME_DESC"
							max_width = 500
							autoresize = yes
						}

						spacer = {
							size = { -1 20 }
						}

						hbox = {
							spacing = 10
							layoutpolicy_horizontal = expanding

							vbox = {
								spacing = 2
								layoutpolicy_horizontal = expanding

								editbox_standard_with_label = {
									layoutpolicy_horizontal = expanding
									blockoverride "editbox_label"
									{
										text = "USERNAME"
									}
									size = { 320 30 }
									blockoverride "editbox_properties" 
									{
									    name = "edit_username"
									    text = "[StatusGetUserName]"
									    onreturnpressed = "[LoginView.SetUserName]"
									    ontextedited = "[LoginView.OnUserNameChange]"
									    maxcharacters = 255
									}
								}

								hbox = {
									visible = "[LoginView.IsEmptyUserNamePrompt]"
									layoutpolicy_horizontal = expanding

									text_single = {
										text = "POPS_LOGIN_EMPTY_USERNAME"
										default_format = "#negative_value;italic"
									}
								}

								text_multi = {
									raw_text = "#X [LoginView.GetErrorMessage]#!"
									multiline = yes
									layoutpolicy_horizontal = expanding
									align = center
									autoresize = yes
								}

								text_single = {
									visible = "[LoginView.IsSuccessfulSetName]"
									text = "POPS_LOGIN_CHANGE_USERNAME_SUCCESS"
									align = left
									layoutpolicy_horizontal = expanding
								}
							}

							expand = {}
						}


						expand = {}

						hbox = {
							spacing = 10

							button_standard = {
								text = "BACK_LABEL"
								layoutpolicy_horizontal = fixed
								onclick = "[LoginView.SetState( 'logged_in' )]"
							}

							button_standard = {
								text = "UPDATE_USERNAME"
								layoutpolicy_horizontal = fixed
								onclick = "[LoginView.SetUserName]"
							}
						}
					}
				}
			}
		}
	}

	type sdk_login_accountwidget = button_account {
		name = "account"
		tooltip = "[SelectLocalization( StatusIsLoggedIn, 'FRONTEND_LOGGED_IN', 'FRONTEND_LOGIN_FOR_MUTLIPLAYER_TT' )]"

		block "properties" {
			onclick = "[StatusWidget.ToggleLoginWindow]"
		}
		enabled = "[Not(StatusIsLoggingIn)]"

		sdk_load_indicator = {
			blockoverride "load_indicator"
			{
				visible = "[StatusIsLoggingIn]"
				size = { 15 15 }
				parentanchor = right|top
				widgetanchor = left
			}
		}

		icon_circle_green = {
			name = "online"
			visible = "[StatusIsLoggedIn]"
			parentanchor = right|top
			widgetanchor = left
		}

		icon_ring = {
			name = "offline"
			visible = "[Not(StatusIsLoggedIn)]"
			size = { 15 15 }
			alpha = 0.5
			parentanchor = right|top
			widgetanchor = left
		}

		block "text" {}
	}
}