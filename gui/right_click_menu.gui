types right_click_menu_types {
	type right_click_menu_item = button {
		name = "right_click_menu_item"
		align = left|nobaseline
		using = fontsize_large
		
		block "size" {
			size = { 460 44 }
		}
		
		block "button" {
			using = default_button
		}
		
		block "properties" {
			raw_tooltip = "Default Item Tooltip"
			enabled = yes
			#onclick = "[SomeCallback]"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left  = 10

			block "icon" {
				icon = {
					block "texture" {
						texture = "gfx/interface/population/pop_culture.dds"
					}
					size = { 28 28 }
				}
			}

			textbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				block "text" {
					raw_text = "#TODO Default Item Text#!"
				}
				align = left|nobaseline
				using = fontsize_large
				fontsize_min = 12
				elide = right
				margin = { 5 0 }
			}

			block "rclick_item_after_label" {}

			block "right_text" {}
		}

		block "margin" {
			margin_left = 15
		}		

		block "onclick" {
			onclick = "[RightClickMenuManager.Close]"
		}

		block "sound" {
			using = select_button_sound
		}
	}

	type right_click_menu_expandable_item = flowcontainer {
		direction = vertical

		right_click_menu_item = {
			blockoverride "button" {
				using = expand_button_bg
			}
			blockoverride "margin" {
				margin_left = 30
			}
			
			container = {
				parentanchor = vcenter
				
				button = {
					using = expand_arrow
					size = { 25 25 }
					alwaystransparent = yes

					block "expanded_list_expand_visible" {}
				}

				button = {
					using = expand_arrow_expanded
					size = { 25 25 }
					alwaystransparent = yes

					block "expanded_list_collapse_visible" {}
				}
			}

			block "unread_icon_expandable_item" {}

			textbox = {
				block "number_of_items_text" {
					raw_text = "-1"
				}
				autoresize = yes
				parentanchor = right|vcenter
				block "position_number_of_items" {}
				align = nobaseline
				default_format = "#v"
				margin_right = 10
			}

			blockoverride "icon" {}
		
			blockoverride = "text" {}			
		}

		flowcontainer = {
			direction = vertical
			block "expanded_list_properties" {}
			margin_bottom = 15
			margin_left = 20
			
			item = {
				button = {
					block "button" {
						using = default_button
					}

					textbox = {
						resizeparent = yes
						minimumsize = { 380 34 }
						maximumsize = { 380 -1 }
						margin = { 15 5 }
						margin_right = 25
						autoresize = yes
						fontsize_min = 12
						elide = right
						multiline = yes
						align = nobaseline
						block "list_item_text_properties" {
							raw_text = "Default Item Text"
							raw_tooltip = "Default Item Tooltip"
						}						
					}

					block "unread_icon" {}

					block "list_item_properties" {
					}
					
					block "enabled" {
						enabled = yes
					}

					block "expandable_onclick" {}
					onclick = "[RightClickMenuManager.Close]"
				}
			}
		}
	}

	type right_click_menu = right_click_menu_widget {
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu

		block "right_click_menu_open_sound" {
			state = {
				name = sound
				trigger_on_create = yes
				start_sound = {
					using = ui_sfx_global_panel_show
				}
			}
		}
		
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		
		# hidden button to close the menu
		button = {
			size = { 0 0 }
			onclick = "[RightClickMenuManager.Close]"
			shortcut = "close_window"
			block "right_click_menu_close_sound" {
				using = ui_close
			}
		}

		flowcontainer = {
			margin = { 8 15 }
			resizeparent = yes
				
			scrollarea = {
				scrollbarpolicy_horizontal = always_off
				scrollbar_vertical = {
					using = vertical_scrollbar
				}

				maximumsize = { -1 800 }
				autoresizescrollarea = yes
			
				scrollwidget = {
					flowcontainer = {
						margin = { 8 0 }
						parentanchor = hcenter
						direction = vertical

						block "header_text" {
							textbox = {
								autoresize = yes
								default_format = "#header"
								align = left|nobaseline
								margin_left = 10
								margin_bottom = 2

								block "title_text" {
									raw_text = "Default Title"
								}
							}
						}

						block "list" {
							flowcontainer = {
								using = default_list_position
								spacing = 2

								direction = vertical

								block "items" {
									right_click_menu_item = {}
								}
							}
						}
					}
				}
			}
		}
	}

	type right_click_menu_dropdown = flowcontainer {
		direction = vertical

		block "parentanchor" {
			parentanchor = hcenter
		}
		
		section_header_button = {
			using = default_fade_in_out
			parentanchor = hcenter

			block "section_header_tooltip" {}

			block "section_header_size" {
				size = { 360 44 }
			}

			blockoverride "arrow_position" {
				position = { 2 0 }
				parentanchor = left|vcenter
			}

			blockoverride "left_textbox_margin_left" {
				margin_left = 30
			}

			blockoverride "right_text" {
				block "section_header_right_text" {}
			}
		}

		block "dropdown_items" {
			dynamicgridbox = {
				block "items_visibility" {}
				
				block "dropdown_datamodel" {
					datamodel = "[DataModelRepeatedItem('(int32)4')]"
				}

				item = {
					flowcontainer = {
						right_click_menu_item = {

							blockoverride "margin" {
								block "item_margin" {
									margin_left = 15
								}
							}

							blockoverride "right_text" {
								block "item_right_textbox" {
									textbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										align = right|nobaseline
										fontsize_min = 12
										elide = right
										margin = { 5 0 }
										margin_right = 10

										block "item_right_text_visibility" {
											visible = no
										}

										block "item_right_text" {
											raw_text = "#todo Right Text#!"
										}
									}
								}
							}
						}
					}
				}
			}

			block "additional_dropdown_items_after_gridbox" {}
		}
	}

	type military_formation_right_click_item = button {
		size = { 100% 100% }

		block "default_button_template" {
			using = default_button_action
		}

		block "tooltip" {}

		block "onclick" {}

		flowcontainer = {
			parentanchor = vcenter
			position = { 10 0 }
			spacing = 5

			icon = {
				### Remove this visible state when the GetIcon/GetTexture function is in
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			### Remove this whole icon when the GetIcon/GetTexture function is in
			icon = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			flowcontainer = {
				direction = vertical
				spacing = 5
				parentanchor = vcenter

				flowcontainer = {
					minimumsize = { 235 30 }
					spacing = 5

					textbox = {
						minimumsize = { 180 30 }
						maximumsize = { 180 30 }
						parentanchor = vcenter
						align = nobaseline
						elide = right
						autoresize = yes
						text = "[MilitaryFormation.GetName]"
						fontsize_min = 14

						block "name_max_width" {
							max_width = 160
						}
					}

					flowcontainer = {
						spacing = 5
						parentanchor = vcenter

						### NUMBER OF UNITS
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = hcenter|nobaseline
							using = fontsize_large
							text = "MILITARY_FORMATION_TOTAL_NUMBER_OF_UNITS_WITH_ICON"
							max_width = 90
							elide = right
							fontsize_min = 12
						}
					}
				}

				textbox = {
					block "status_visibility" {}
					align = nobaseline
					autoresize = yes
					text = "[MilitaryFormation.GetShortFormationStatusDesc]"
					max_width = 235
					elide = right
					fontsize_min = 14
				}

				textbox = {
					block "mobilization_info_visibliity" {
						visible = no
					}

					align = nobaseline
					autoresize = yes
					text = "NAVAL_INVASION_PLANNER_ARMY_NOT_MOBILIZED"
					max_width = 235
					elide = right
					fontsize_min = 14
				}
			}
		}
	}

	type military_formation_right_click_item_selected = widget {
		size = { 100% 100% }

		block "tooltip" {}

		background = {
			using = paper_bg
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 10 0 }
			spacing = 5

			icon = {
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			icon = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			flowcontainer = {
				direction = vertical
				spacing = 5
				parentanchor = vcenter

				flowcontainer = {
					minimumsize = { 235 30 }
					spacing = 5

					textbox = {
						minimumsize = { 180 30 }
						maximumsize = { 180 30 }
						parentanchor = vcenter
						align = nobaseline
						autoresize = yes
						text = "[MilitaryFormation.GetName]"
						elide = right
						fontsize_min = 14

						block "name_max_width" {
							max_width = 160
						}
					}

					flowcontainer = {
						spacing = 5
						parentanchor = vcenter

						### NUMBER OF UNITS
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = hcenter|nobaseline
							using = fontsize_large
							text = "MILITARY_FORMATION_TOTAL_NUMBER_OF_UNITS_WITH_ICON"
							max_width = 90
							elide = right
							fontsize_min = 12
						}
					}
				}

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "[MilitaryFormation.GetShortFormationStatusDesc]"
					max_width = 235
					elide = right
					fontsize_min = 14
				}
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}
}

right_click_menu = {
	name = "building_right_click_menu"
	datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"

	blockoverride "title_text" {
		text = "BUILDING_RIGHT_CLICK_MENU_TITLE"
	}
	blockoverride "items" {

		flowcontainer = {
			visible = "[Not(Building.GetBuildingType.IsMilitaryBuilding)]"
			direction = vertical
			parentanchor = hcenter

			right_click_menu_item = {

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}
				
				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_EXPAND"
				}

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					tooltip = "[Building.GetQueueConstructionTooltip]"
					enabled = "[IsValid( Building.QueueConstruction )]"
					visible = "[Building.IsExpandable]"
					onclick = "[Execute( Building.QueueConstruction )]"
				}
			}
			right_click_menu_item = {
				
				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(IsPotential( Building.ToggleAutoExpand ),Not(Building.IsAutoExpanding))]"
					tooltip = [Building.GetAutoExpandTooltip]
					enabled = "[IsValid( Building.ToggleAutoExpandOn )]"
					onclick = "[Execute( Building.ToggleAutoExpandOn )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/production_methods/auto_expand.dds"
				}
				
				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_AUTOEXPAND_ON"
				}
			}

			right_click_menu_item = {
				
				blockoverride "margin" {
					margin_left = 45
				}
				blockoverride "properties" {
					visible = "[And(IsPotential( Building.ToggleAutoExpand ),Building.IsAutoExpanding)]"				
					tooltip = [Building.GetAutoExpandTooltip]
					enabled = "[IsValid( Building.ToggleAutoExpandOff )]"
					onclick = "[Execute( Building.ToggleAutoExpandOff )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/production_methods/auto_expand_not.dds"
				}
				
				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_AUTOEXPAND_OFF"
				}
			}

			right_click_menu_item = {
				
				blockoverride "margin" {
					margin_left = 45
				}
				blockoverride "properties" {
					visible = "[And(Building.IsExpandable, IsValid( Building.QueueConstruction ))]"
					onclick = "[Building.GetBuildingType.ActivateExpansionLens]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}
				
				blockoverride = "text" {
					text = "OPEN_EXPANSION_LENS"
				}
			}

			right_click_menu_item = {
				
				blockoverride "margin" {
					margin_left = 45
				}
				blockoverride "properties" {	
					tooltip = "[Building.GetCancelConstructionTooltip]"
					visible = "[IsValid( Building.CancelConstruction )]"
					onclick = "[Execute( Building.CancelConstruction )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}
				
				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_CANCEL_CONSTRUCTION"
				}
			}

			### DOWNSIZE
			right_click_menu_item = {
				
				blockoverride "margin" {
					margin_left = 45
				}
				blockoverride "properties" {
					visible = "[And( And( Building.IsValid, Building.IsDownsizeable ), Not( ShouldAskConfirmation( Building.Downsize ) ) )]"
					tooltip = "[Building.GetDownsizeTooltip]"
					enabled = "[IsValid( Building.Downsize )]"
					onclick = "[Execute( Building.Downsize )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}
				
				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_DOWNSIZE"
				}
			}

			### DOWNSIZE WITH CONFIRMATION
			right_click_menu_item = {
				blockoverride "margin" {
					margin_left = 45
				}
				blockoverride "properties" {
					visible = "[And( And( Building.IsValid, Building.IsDownsizeable ), ShouldAskConfirmation( Building.Downsize ) )]"
					tooltip = "[Building.GetDownsizeTooltip]"
					enabled = "[IsValid( Building.Downsize )]"
					onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}
				
				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_DOWNSIZE"
				}
			}
		}

		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				visible = "[And(IsValid( Building.ToggleSubsidies ),Not(Building.IsSubsidized))]"			
				tooltip = "[Building.GetSubsidizeTooltip]"
				enabled = "[IsValid( Building.ToggleSubsidiesOn )]"
				onclick = "[Execute( Building.ToggleSubsidiesOn )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/subsidized.dds"
			}
			
			blockoverride = "text" {
				text = "BUILDING_RIGHT_CLICK_MENU_SUBSIDIZE_ON"
			}
		}

		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				visible = "[And(IsValid( Building.ToggleSubsidies ),Building.IsSubsidized)]"			
				tooltip = "[Building.GetSubsidizeTooltip]"
				enabled = "[IsValid( Building.ToggleSubsidiesOff )]"
				onclick = "[Execute( Building.ToggleSubsidiesOff )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/subsidized.dds"
			}
			
			blockoverride = "text" {
				text = "BUILDING_RIGHT_CLICK_MENU_SUBSIDIZE_OFF"
			}
		}

		# RESET PRODUCTION METHODS
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				onclick = "[Execute( Building.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( Building.ResetProductionMethodsToStandard )]"
				tooltip = "[Building.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}
			
			blockoverride = "text" {
				text = "RESET_PM_BUILDING"
			}
		}
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				onclick = "[Execute( Building.GetBuildingType.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( Building.GetBuildingType.ResetProductionMethodsToStandard )]"
				tooltip = "[Building.GetBuildingType.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}
			
			blockoverride = "text" {
				text = "RESET_PM_BUILDING_TYPE"
			}
		}
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
					enabled = "[IsValid( Building.NationalizeBuildingLevels( '(int32)1' ) )]"
					onclick = "[PopupManager.ShowNationalizeBuildingConfirmation(Building.Self)]"
					tooltip = "BUILDING_NATIONALIZE_TOOLTIP"
			}
			
			blockoverride "texture" {
				texture = "gfx/interface/production_methods/nationalize.dds"
			}
			
			blockoverride = "text" {
				text = "BUILDING_NATIONALIZE"
			}
		}
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				enabled = "[IsValid( Building.TogglePrivatization)]"
				onclick = "[Execute( Building.TogglePrivatization)]"
				tooltip = "[Building.GetTogglePrivatizationToolTip]"
				visible = "[Building.CanBePrivatized]"
			}
			
			blockoverride "texture" {
				texture = "gfx/interface/production_methods/privatize.dds"
			}
			
			blockoverride = "text" {
				text = "BUILDING_DISABLE_PRIVATIZATION"
			}
		}
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				enabled = "[IsValid( Building.TogglePrivatization)]"
				onclick = "[Execute( Building.TogglePrivatization)]"
				tooltip = "[Building.GetTogglePrivatizationToolTip]"
				visible = "[Not(Building.CanBePrivatized)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/privatize_not.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_ENABLE_PRIVATIZATION"
			}
		}
	}
}

right_click_menu = {
	name = "building_type_right_click_menu"
	datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"

	blockoverride "title_text" {
		text = "[BuildingType.GetName]"
	}
	blockoverride "items" {
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				visible = "[And(BuildingType.IsExpandable, Not(BuildingType.IsMilitaryBuilding))]"
				onclick = "[BuildingType.ActivateExpansionLens]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/plus.dds"
			}
			
			blockoverride = "text" {
				text = "OPEN_EXPANSION_LENS"
			}
		}

		# RESET PRODUCTION METHODS
		right_click_menu_item = {
			
			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				onclick = "[Execute( BuildingType.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( BuildingType.ResetProductionMethodsToStandard )]"
				tooltip = "[BuildingType.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}
			
			blockoverride = "text" {
				text = "RESET_PM_BUILDING_TYPE"
			}
		}	
	}
}

right_click_menu = {
	name = "ig_right_click_menu"

	blockoverride "title_text" {
		text = "IG_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_SUPPRESS"
				visible = "[Not( InterestGroup.IsSuppressed )]"
				enabled = "[IsValid( InterestGroup.ToggleSuppression )]"
				onclick = "[Execute( InterestGroup.ToggleSuppression )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
			}
			
			blockoverride = "text" {
				text = "IG_RIGHT_CLICK_MENU_SUPPRESS"
			}
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_SUPPRESS_NOT"
				visible = "[InterestGroup.IsSuppressed]"
				enabled = "[IsValid( InterestGroup.ToggleSuppression )]"
				onclick = "[Execute( InterestGroup.ToggleSuppression )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
			}
			
			blockoverride = "text" {
				text = "IG_RIGHT_CLICK_MENU_SUPPRESS_NOT"
			}
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_PROMOTE"
				visible = "[Not( InterestGroup.IsBolstered )]"
				enabled = "[IsValid( InterestGroup.TogglePromotion )]"
				onclick = "[Execute( InterestGroup.TogglePromotion )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
			}
			
			blockoverride = "text" {
				text = "IG_RIGHT_CLICK_MENU_PROMOTE"
			}
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_PROMOTE_NOT"
				visible = "[InterestGroup.IsBolstered]"
				enabled = "[IsValid( InterestGroup.TogglePromotion )]"
				onclick = "[Execute( InterestGroup.TogglePromotion )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
			}
			
			blockoverride = "text" {
				text = "IG_RIGHT_CLICK_MENU_PROMOTE_NOT"
			}
		}

		right_click_menu_item = {
			visible = "[InterestGroup.GetCountry.IsLocalPlayer]"

			blockoverride "properties" {
				onclick = "[InterestGroup.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[InterestGroup.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(InterestGroup.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride = "text" {
				text = "IG_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}
	}
}

right_click_menu = {
	name = "decree_right_click_menu"

	blockoverride "title_text" {
		text = "DECREE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "DECREE_REMOVE"
				enabled = "[IsValid( Decree.GetRemoveCommand )]"
				onclick = "[Execute( Decree.GetRemoveCommand )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/close.dds"
			}
			
			blockoverride = "text" {
				text = "DECREE_RIGHT_CLICK_MENU_REMOVE"
			}
		}
	}
}

right_click_menu = {
	name = "set_default_combat_unit_right_click_menu"

	blockoverride "title_text" {
		text = "SET_DEFAULT_UNIT_TYPE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[MilitaryFormation.GetEligibleTypesByGroup( CombatUnitGroup.AccessSelf )]"
			
			item = {
				flowcontainer = {
					default_unit_right_click_item = {
						visible = "[Not(ObjectsEqual(CombatUnitType.Self, MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.Self).Self))]"
					}

					default_unit_right_click_item_selected = {
						visible = "[ObjectsEqual(CombatUnitType.Self, MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.Self).Self)]"
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "military_formation_right_click_menu"

	blockoverride "title_text" {
		text = "[MilitaryFormation.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {		# GO TO PANEL
			visible = "[Not(InformationPanelBar.IsPanelOpen('military_formation'))]"
			
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenMilitaryFormationPanel(MilitaryFormation.AccessSelf)]"
				tooltip = "GO_TO_BUTTON_MILITARY_FORMATION"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride = "text" {
				text = "CHARACTER_RIGHT_CLICK_MENU_INFORMATION"
			}

			blockoverride "size" {
				size = { 260 44 }
			}
		}

		right_click_menu_item = {		# EDIT NAME AND EMBLEM
			blockoverride "properties" {
				onclick = "[PopupManager.ShowMilitaryFormationChangeName(MilitaryFormation.Self)]"
				tooltip = "CUSTOMIZE_NAME_AND_EMBLEM"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/edit.dds"
			}

			blockoverride = "text" {
				text = "CUSTOMIZE"
			}

			blockoverride "size" {
				size = { 260 44 }
			}
		}

		right_click_menu_item = {
			visible = "[MilitaryFormation.GetCountry.IsLocalPlayer]"
			blockoverride "properties" {
				onclick = "[MilitaryFormation.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[MilitaryFormation.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(MilitaryFormation.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride "text" {
				text = "MILITARY_FORMATION_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}

			blockoverride "size" {
				size = { 260 44 }
			}		
		}

		flowcontainer = {
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			spacing = 2
			direction = vertical

			right_click_menu_item = {		# MOBILIZE
				visible = "[And(MilitaryFormation.IsArmy, Not(MilitaryFormation.IsMobilized))]"
				
				blockoverride "properties" {
					onclick = "[Execute( MilitaryFormation.Mobilize )]"
					tooltip = "MOBILIZE_ARMY_TOOLTIP"
					enabled = "[IsValid( MilitaryFormation.Mobilize )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/mobilize_icon_single.dds"
				}

				blockoverride = "text" {
					text = "MOBILIZE_ARMY"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# DEMOBILIZE
				visible = "[And(MilitaryFormation.IsArmy, MilitaryFormation.IsMobilized)]"
				
				blockoverride "properties" {
					enabled = "[IsValid( MilitaryFormation.Demobilize )]"
					onclick = "[PopupManager.AskConfirmation( MilitaryFormation.Demobilize )]"
					tooltip = "DEMOBILIZE_ARMY_TOOLTIP"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/mobilize_icon_single.dds"
				}

				blockoverride = "text" {
					text = "DEMOBILIZE_ARMY"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# RAISE CONSCRIPTS
				visible = "[MilitaryFormation.IsArmy]"
				
				blockoverride "properties" {
					enabled = "[IsValid( MilitaryFormation.RaiseConscripts )]"
					onclick = "[Execute( MilitaryFormation.RaiseConscripts )]"
					tooltip = "RAISE_ALL_CONSCRIPTS_TOOLTIP"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/lens_toolbar_icons/activate_conscription_centers_lens_option.dds"
				}

				blockoverride = "text" {
					text = "RAISE_ALL_CONSCRIPTS"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# DEPLOY TO FRONT
				visible = "[MilitaryFormation.IsArmy]"
				
				blockoverride "properties" {
					tooltip = "DEPLOY_MILITARY_FORMATION_TO_FRONT_TOOLTIP"
					onclick = "[MilitaryFormation.OnDeployToFrontClicked]"
					enabled = "[MilitaryFormation.IsMobilized]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/commander_order_icons/move.dds"
				}

				blockoverride = "text" {
					text = "DEPLOY_MILITARY_FORMATION_TO_FRONT_TEXT"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# DEPLOY TO SEA NODE
				visible = "[MilitaryFormation.IsFleet]"

				blockoverride "properties" {
					tooltip = "DEPLOY_MILITARY_FORMATION_TO_SEA_NODE_TOOLTIP"
                    enabled = "[MilitaryFormation.CanDeployToSeaNode]"
					onclick = "[MilitaryFormation.OnDeployToSeaNodeClicked]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/generic_icons/unused/sea_region_mm_battle.dds"
				}

				blockoverride = "text" {
					text = "DEPLOY_MILITARY_FORMATION_TO_SEA_NODE_LABEL"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# STATION
				
				blockoverride "properties" {
					tooltip = "STATION_MILITARY_FORMATION_TOOLTIP"
                    enabled = "[MilitaryFormation.CanStation]"
					onclick = "[MilitaryFormation.OnStationClicked]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/alert_icons/has_army_in_reserve.dds"
				}

				blockoverride = "text" {
					text = "STATION_MILITARY_FORMATION_LABEL"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# Naval invasion
				
				blockoverride "properties" {
					tooltip = "MILITARY_FORMATION_NAVAL_INVASION_TOOLTIP"
					onclick = "[MilitaryFormation.OnNavalInvasionClicked]"
					enabled = "[MilitaryFormation.CanNavallyInvade]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/formation_order_icons/naval_invasion.dds"
				}

				blockoverride = "text" {
					text = "MILITARY_FORMATION_NAVAL_INVASION_LABEL"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# Disband Formation
				
				blockoverride "properties" {
					tooltip = "MILITARY_FORMATION_DISBAND_TOOLTIP"
					onclick = "[PopupManager.AskConfirmation( MilitaryFormation.Disband )]"
					enabled = "[IsValid( MilitaryFormation.Disband )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/military_icons/disband_formation.dds"
				}

				blockoverride = "text" {
					text = "MILITARY_FORMATION_DISBAND"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_any_source"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_army_source"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_fleet_source"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_any_target"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"
				
				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_army_target"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_fleet_target"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"
				
				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	datacontext = "[StagedFormation.GetMilitaryFormation]"
	name = "filter_unit_states_right_click_menu"
	parentanchor = right|bottom

	blockoverride "title_text" {
		text = "SELECT_STATE_TO_FILTER_ON"
	}

	blockoverride "items" {

		flowcontainer = {
			direction = vertical

			dynamicgridbox = {
				datamodel = "[StagedUnitsWithType.GetStagedCombatUnitStates]"

				item = {
					widget = {
						size = { 460 44 }

						right_click_menu_item = {
							visible = "[Not(ObjectsEqual(StagedUnitsWithType.GetStateFilter.Self, State.Self))]"

							blockoverride "properties" {
								onclick = "[StagedUnitsWithType.SetStateFilter( State.AccessSelf )]"
								
								datacontext = "[StagedUnitsWithType]"
								datacontext = "[StagedFormation]"
								tooltip = "FILTER_UNITS_IN_STATE_TOOLTIP"
							}
							
							blockoverride "text" {
								text = "[State.GetName]"
							}

							blockoverride "right_text" {
								textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "UNIT_TYPE_UNITS_IN_STATE"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}

							blockoverride "icon" {
								tiny_flag_no_interact = {
									datacontext = "[State.GetCountry]"
								}
							}

							blockoverride "margin" {
								margin_left = 55
							}
						}

						right_click_menu_item = {
							visible = "[ObjectsEqual(StagedUnitsWithType.GetStateFilter.Self, State.Self)]"

							background = {
								using = paper_bg
							}

							blockoverride "button" {}

							blockoverride "properties" {
								onclick = "[StagedUnitsWithType.SetStateFilter( State.AccessSelf )]"
								tooltip = "FILTER_UNITS_IN_STATE_TOOLTIP"
							}
							
							blockoverride "text" {
								text = "[State.GetName]"
							}

							blockoverride "right_text" {
								textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "UNIT_TYPE_UNITS_IN_STATE"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}

							blockoverride "icon" {
								tiny_flag_no_interact = {
									datacontext = "[State.GetCountry]"
								}
							}

							blockoverride "margin" {
								margin_left = 55
							}

							icon = {
								using = highlighted_square_selection
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "select_fleet_right_click_menu"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
						visible = "[Not(NavalInvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self))]"

                        blockoverride "tooltip" {
                        	tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)))]"
                        				text =  "[NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}

						blockoverride "onclick" {
							enabled = "[NavalInvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self)]"
							onclick = "[NavalInvasionPlannerPopup.OnSelectedFleet(MilitaryFormation.AccessSelf)]"
                        	onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
						visible = "[NavalInvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self)]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)))]"
                        				text =  "[NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}
					}
				}
			}

		}
	}
}

right_click_menu = {
	name = "select_army_right_click_menu"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
						visible = "[Not(NavalInvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self))]"

                        blockoverride "tooltip" {
				        	tooltip =  "[NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
				        	using = tooltip_above
						}

						blockoverride "onclick" {
							enabled = "[NavalInvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self)]"
							onclick = "[NavalInvasionPlannerPopup.OnSelectedArmy(MilitaryFormation.AccessSelf)]"
                        	onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
						visible = "[NavalInvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self)]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)))]"
                        				text =  "[NavalInvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}
					}
				}
			}

		}
	}
}

right_click_menu = {
	name = "add_fleet_naval_invasion_right_click_menu"
	parentanchor = hcenter|bottom

	blockoverride "title_text" {
		text = "SELECT_FLEET_TO_SEND"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
						visible = "[And(Not(MilitaryFormation.IsTargetSeaNode(NavalInvasion.GetSeaNode.Self)), Not(MilitaryFormation.IsCurrentSeaNode(NavalInvasion.GetSeaNode.Self)))]"

                        blockoverride "tooltip" {
                        	tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(GetDesc(NavalInvasion.DeployFleetToDefend(MilitaryFormation.Self))))]"
                        				text =  "[GetDesc(NavalInvasion.DeployFleetToDefend(MilitaryFormation.Self))]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}

						blockoverride "onclick" {
							enabled = "[IsValid(NavalInvasion.DeployFleetToDefend(MilitaryFormation.Self))]"
							onclick = "[Execute(NavalInvasion.DeployFleetToDefend(MilitaryFormation.Self))]"
                        	onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
						visible = "[Or(MilitaryFormation.IsTargetSeaNode(NavalInvasion.GetSeaNode.Self), MilitaryFormation.IsCurrentSeaNode(NavalInvasion.GetSeaNode.Self))]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                                        visible = "[Not(StringIsEmpty(GetDesc(NavalInvasion.DeployFleetToDefend(MilitaryFormation.Self))))]"
                                        text =  "[GetDesc(NavalInvasion.DeployFleetToDefend(MilitaryFormation.Self))]"
                                        margin_bottom = 15
                                    }
                        		}
                        	}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "add_army_naval_invasion_right_click_menu"
	parentanchor = hcenter|bottom

	blockoverride "title_text" {
		text = "SELECT_ARMY_TO_SEND"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
                        visible = "[Or(Not(MilitaryFormation.IsMobilized),And(Not(MilitaryFormation.IsTargetHQ(NavalInvasion.GetDefenderHQ.Self)), Not(MilitaryFormation.IsCurrentHQ(NavalInvasion.GetDefenderHQ.Self))))]"

                        blockoverride "tooltip" {
                        	tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(GetDesc(NavalInvasion.DeployArmyToDefend(MilitaryFormation.Self))))]"
                                        text =  "[GetDesc(NavalInvasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}

						blockoverride "onclick" {
							enabled = "[IsValid(NavalInvasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                            onclick = "[Execute(NavalInvasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                            onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
                        visible = "[And(Or(MilitaryFormation.IsTargetHQ(NavalInvasion.GetDefenderHQ.Self), MilitaryFormation.IsCurrentHQ(NavalInvasion.GetDefenderHQ.Self)), MilitaryFormation.IsMobilized)]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(GetDesc(NavalInvasion.DeployArmyToDefend(MilitaryFormation.Self))))]"
                                        text =  "[GetDesc(NavalInvasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "select_order_right_click_menu"

	blockoverride "title_text" {
		text = "SELECT_ORDER_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		flowcontainer = {
			direction = vertical
			spacing = 10

			### ORDERS
			dynamicgridbox = {
				datamodel = "[Character.AccessOrders]"

				item = {
					flowcontainer = {
						right_click_menu_item = {
							visible = "[And( Not( ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self) ), Not( And( Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ) ) ) )]"

							blockoverride "properties" {
								tooltipwidget = {
									FancyTooltip_CommanderOrderType = {
										blockoverride "text_before" {
											using = visible_if_either_current_or_next_order
											text =  "NEXT_OR_CURRENT_ORDER"
											margin_bottom = 15
										}
									}
								}
								clicksound = "[CommanderOrderType.GetClickSound]"
						        enabled = "[IsValid(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[Execute(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[RightClickMenuManager.Close]"
							}

							blockoverride "texture" {
								texture = "[CommanderOrderType.GetTexture]"
							}

							blockoverride "text" {
								text = "[CommanderOrderType.GetNameNoFormatting]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}

							blockoverride "right_text" {
								textbox = {
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "CURRENT"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}

						widget = {
							visible = "[And(Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ))]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[CommanderOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[CommanderOrderType.GetNameNoFormatting]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}
		                    }

		                    textbox = {
								visible = "[Character.HasOrder( CommanderOrderType.Self )]"
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "CURRENT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}

						widget = {
							visible = "[ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self)]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[Character.GetNextOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[Character.GetNextOrderType.GetName]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}
		                    }

		                    textbox = {
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "NEXT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}
					}
				}
			}

			right_click_menu_dropdown = {
				blockoverride "section_header_tooltip" {
					tooltip = "UNAVAILABLE_ORDERS_TOOLTIP"
				}

				blockoverride "left_text" {
					text = "UNAVAILABLE_ORDERS"
				}

				blockoverride "section_header_right_text" {
					flowcontainer = {
						margin = { 5 0 }
						spacing = 5

						icon = {
							visible = "[Character.HasUnavailableAdvanceOrders]"
							size = { 35 35 }
							texture = "gfx/interface/backgrounds/round_button_bg.dds"
							parentanchor = vcenter

							icon = {
								size = { 75% 75% }
								texture = "gfx/interface/icons/commander_order_icons/advance.dds"
								parentanchor = center
							}
						}

						icon = {
							visible = "[Character.HasUnavailableDefendOrders]"
							size = { 35 35 }
							texture = "gfx/interface/backgrounds/round_button_bg.dds"
							parentanchor = vcenter

							icon = {
								size = { 75% 75% }
								texture = "gfx/interface/icons/commander_order_icons/defend.dds"
								parentanchor = center
							}
						}

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							default_format = "#v"
							raw_text = "[GetDataModelSize(Character.AccessUnavailableOrders)]"
						}
					}
				}

				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle('show_unavailable_orders')]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists('show_unavailable_orders'))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists('show_unavailable_orders')]"
				}

				blockoverride "items_visibility" {
					visible = "[GetVariableSystem.Exists('show_unavailable_orders')]"
				}

				blockoverride "dropdown_datamodel" {
					datamodel = "[Character.AccessUnavailableOrders]"
				}

				blockoverride "properties" {
					tooltipwidget = {
						FancyTooltip_CommanderOrderType = {
							blockoverride "text_before" {
								using = visible_if_either_current_or_next_order
								text =  "NEXT_OR_CURRENT_ORDER"
								margin_bottom = 15
							}
						}
					}

					clicksound = "[CommanderOrderType.GetClickSound]"
			        enabled = no
			        onclick = "[Character.SelectOrder( CommanderOrderType.Self )]"
			        onclick = "[RightClickMenuManager.Close]"
				}

				blockoverride "item_margin" {
					margin_left = 35
				}

				blockoverride "texture" {
					texture = "[CommanderOrderType.GetTexture]"
				}

				blockoverride "text" {
					text = "[CommanderOrderType.GetNameNoFormatting]"
				}

				blockoverride "size" {
					size = { 360 44 }
				}

				blockoverride "item_right_text_visibility" {
					visible = "[Character.HasOrder( CommanderOrderType.Self )]"
				}

				blockoverride "item_right_text" {
					text = "CURRENT"
				}
			}
		}
	}
}

right_click_menu = {
	name = "military_formation_marker_right_click_menu"

	blockoverride "title_text" {
		text = "MILITARY_FORMATION_MARKER_SELECT_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			dynamicgridbox = {
				datamodel = "[FormationMarker.GetFormations]"

				item = {
					right_click_menu_item = {
						tooltipwidget = {
							FancyTooltip_MilitaryFormation = {}
						}
					
						blockoverride "properties" {
							onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( MilitaryFormation.AccessSelf, 'default' )]"
						}

						blockoverride "texture" {
							texture = "[MilitaryFormation.GetFlag]"
						}

						blockoverride "text" {
							text = "MILITARY_FORMATION_MARKER_RIGHT_CLICK_ITEM_DESC"
						}

						blockoverride "size" {
							size = { 360 44 }
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "character_right_click_menu"

	blockoverride "title_text" {
		text = "CHARACTER_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {		# GO TO PANEL
			visible = "[Not(InformationPanelBar.IsPanelOpen('commander'))]"
			
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
				tooltip = "GO_TO_BUTTON_CHARACTER"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride = "text" {
				text = "CHARACTER_RIGHT_CLICK_MENU_INFORMATION"
			}

			blockoverride "size" {
				size = { 360 44 }
			}
		}

		right_click_menu_item = {		# TOGGLE PIN
			blockoverride "properties" {
				visible = "[Character.GetCountry.IsLocalPlayer]"
				onclick = "[Character.TogglePinInOutliner]"
			}
			
			blockoverride "icon" {
				icon = {
					visible = "[Character.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Character.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride = "text" {
				text = "CHARACTER_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}

			blockoverride "size" {
				size = { 360 44 }
			}
		}

		flowcontainer = {
			direction = vertical

			textbox = {					# CHARACTER INTERACTIONS HEADER
				visible = "[Not(IsDataModelEmpty(Character.GetInteractions))]"
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
				text = "CHARACTER_INTERACTIONS_HEADER"
			}

			right_click_menu_item = {	# PROMOTE COMMANDER
				blockoverride "properties" {
					visible = "[And(And( Character.GetCountry.IsLocalPlayer, Character.IsCommander ),Not(Character.MakeScope.Var('figure_var').IsSet))]"
					tooltip = "MILITARY_PANEL_PROMOTE_CHARACTER_TOOLTIP"
					enabled = "[IsValid(Character.GetPromoteCommand)]"
					onclick = "[PopupManager.AskConfirmationWithSound(Character.GetPromoteCommand, 'event:/SFX/UI/Military/commander_promote')]"			
				}

				blockoverride "texture" {
					texture = "[Character.GetNextCommanderRank.GetTexture]"
				}

				blockoverride = "text" {
					text = "CHARACTER_RIGHT_CLICK_MENU_PROMOTE_COMMANDER"
				}

				blockoverride "size" {
					size = { 360 44 }
				}
			}

			right_click_menu_item = {	# SPLIT INTO OWN FORMATION
				blockoverride "properties" {
					visible = "[And(And( Character.GetCountry.IsLocalPlayer, Character.IsCommander ),  Not(Character.MakeScope.Var('figure_var').IsSet)]"
					tooltip = "MILITARY_PANEL_SPLIT_CHARACTER_INTO_OWN_FORMATION_TOOLTIP"
					enabled = "[IsValid(Character.SplitIntoOwnFormation)]"
					onclick = "[PopupManager.AskConfirmation(Character.SplitIntoOwnFormation)]"
				}

				blockoverride "icon" {}

				blockoverride "text" {
					text = "CHARACTER_RIGHT_CLICK_MENU_SPLIT_INTO_OWN_FORMATION"
				}

				blockoverride "size" {
					size = { 360 44 }
				}
			}

			dynamicgridbox = {			# INTERACTIONS
				datamodel = "[Character.GetInteractions]"
				item = {
					right_click_menu_item = {
						blockoverride "properties" {
							tooltip = "CHARACTER_INTERACTION_TOOLTIP"
							enabled = "[CharacterInteraction.IsCommandValid(Character.Self)]"
							onclick = "[CharacterInteraction.ExecuteCommand(Character.Self)]"
						}
						clicksound = "[CharacterInteraction.GetClickSound]"

						blockoverride "texture" {
							visible = "[CharacterInteraction.HasIcon]"
							texture = "[CharacterInteraction.GetIcon]"
						}

						blockoverride "text" {
							text = "CHARACTER_INTERACTION_NAME"
						}

						blockoverride "size" {
							size = { 360 44 }
						}
					}
				}
			}
		}

		flowcontainer = {
			direction = vertical
			visible = "[And(Character.GetCountry.IsLocalPlayer,  Not(Character.MakeScope.Var('figure_var').IsSet))]"

			textbox = {					# CURRENT ORDER (TEXT)
				visible = "[And(Character.IsCommander, Not(Character.GetNextOrderType.IsValid))]"
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
				text = "COMMANDER_PANEL_CURRENT_ORDER_SHORT"
			}

			textbox = {					# NEXT ORDER (TEXT)
				visible = "[And(Character.IsCommander, Character.GetNextOrderType.IsValid)]"
				margin_top = 5
				margin_left = 5
				margin_bottom = 5
				autoresize = yes
				align = left|nobaseline
				text = "COMMANDER_PANEL_NEXT_ORDER_SHORT"
			}

			dynamicgridbox = {			# ORDERS
				datamodel = "[Character.AccessOrders]"
				item = {
					container = {
						right_click_menu_item = {
							visible = "[And( Not( ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self) ), Not( And( Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ) ) ) )]"

							blockoverride "properties" {
								tooltipwidget = {
									FancyTooltip_CommanderOrderType = {
										blockoverride "text_before" {
											using = visible_if_either_current_or_next_order
											text =  "NEXT_OR_CURRENT_ORDER"
											margin_bottom = 15
										}
									}
								}
								clicksound = "[CommanderOrderType.GetClickSound]"
						        enabled = "[IsValid(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[Execute(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[RightClickMenuManager.Close]"
							}

							blockoverride "texture" {
								texture = "[CommanderOrderType.GetTexture]"
							}

							blockoverride "text" {
								text = "[CommanderOrderType.GetName]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}

							blockoverride "right_text" {
								textbox = {
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "CURRENT"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}

						

						widget = {
							visible = "[And(Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ))]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[CommanderOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[CommanderOrderType.GetName]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}
		                    }

		                    textbox = {
								visible = "[Character.HasOrder( CommanderOrderType.Self )]"
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "CURRENT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}

						widget = {
							visible = "[ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self)]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[Character.GetNextOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[Character.GetNextOrderType.GetName]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}
		                    }

		                    textbox = {
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "NEXT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}
					}
				}
			}
		}

		flowcontainer = {				# HISTORICAL CHARACTER
			visible = "[And( Character.IsHistorical, Not( StringIsEmpty( Character.GetHistoricalUrl )))]"
			direction = vertical

			textbox = {
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
				text = "CHARACTER_HISTORICAL_HEADER"
			}

			right_click_menu_item = {	# OPEN HISTORICAL CHARACTER URL
				blockoverride "properties" {
					onclick = "[Character.OpenHistoricalUrl]"
					tooltip = "CHARACTER_HISTORICAL_OPEN_URL_TOOLTIP"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/historical_character_icon.dds"
				}

				blockoverride = "text" {
					text = "CHARACTER_HISTORICAL_OPEN_URL"
				}

				blockoverride "size" {
					size = { 360 44 }
				}
			}
		}
	}
}

right_click_menu = {
	name = "impose_law_right_click_menu"

	blockoverride "title_text" {
		text = "LAW_RIGHT_CLICK_MENU_TITLE"
	}
	

	blockoverride "items" {
		
		flowcontainer = {
			direction = vertical

			textbox = {					# IMPOSE LAW HEADER 
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
			}

			dynamicgridbox = {			# INTERACTIONS
				datamodel = "[Law.GetLawAlternatives]"
				item = { 
					container = {
						right_click_menu_item = {
							visible = "[Not(Law.IsActive)]"

							blockoverride "properties" {
								tooltip = "IMPOSE_LAW_TOOLTIP"
								enabled = "[IsValid( Law.StartImposing )]"
								onclick = "[PopupManager.AskConfirmation( Law.StartImposing )]"
							}

							blockoverride "texture" {
								texture = "[Law.GetTexture]"
							}

							blockoverride "text" {
								text = "[Law.GetNameNoFormatting]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}
							blockoverride "right_text" {
								textbox = {
									visible = "[Law.IsBeingEnacted]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "ENACTING"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}
						
						right_click_menu_item = {
							visible = "[Law.IsActive]"

							blockoverride "onclick" {}
							blockoverride "button" {
								background = {
									using = paper_bg
								}
							}
							blockoverride "properties" {
								tooltipwidget = {
									FancyTooltip_Law = {}
								}
								icon = {
									using = highlighted_square_selection
									size = { 100% 100% }
								}
							}

							blockoverride "texture" {
								texture = "[Law.GetTexture]"
							}

							blockoverride "text" {
								text = "[Law.GetNameNoFormatting]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}
							blockoverride "right_text"
							{
									textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "CURRENT"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}
					}
				}
			}
		}
	}

}

right_click_menu = {
	name = "state_right_click_menu"

	blockoverride "title_text" {
		text = "STATE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "header_text" {} #no header for state menu, handle in items instead

	blockoverride "items" {

		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10

				tiny_flag = {
					parentanchor = vcenter
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					text = "STATE_RIGHT_CLICK_MENU_COUNTRY_TITLE"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'default')]"
					tooltip = "GO_TO_BUTTON_COUNTRY"
					input_action = "go_to_details"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				button_icon_zoom = {
					parentanchor = vcenter
					size = { 28 28 }
					tooltip = "ZOOM_TO_CAPITAL_STATE"
					onclick = "[Country.AccessCapital.ZoomToCapital]"
					enabled = "[Not( Country.AccessCapital.IsZoomingToCapital )]"
				}

				button_icon_toggle_pin = {
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "COUNTRY_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(Country.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[Country.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[Country.TogglePinInOutliner]"
					}
				}
			}
		}

		widget = { size = { 4 4 }} #pixelpushing tweak for flag, hack due to parentanchor and margins interacting weird

		country_right_click_menu_items = {}

		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10
				margin_top = 20

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					text = "STATE_RIGHT_CLICK_MENU_STATE_TITLE"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenStatePanel( State.AccessSelf )]"
					tooltip = "GO_TO_BUTTON_STATE"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				button_icon_zoom = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[State.ZoomToCapital]"
					tooltip = "ZOOM_TO_STATE"
					enabled = "[Not( State.IsZoomingToCapital )]"
				}

				button_icon_toggle_pin = {
					visible = "[Country.IsLocalPlayer]"
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "STATE_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(State.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[State.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[State.TogglePinInOutliner]"
					}
				}
			}
		}

		right_click_menu_item = {
			visible = "[IsPotential( State.IncorporateState )]"
			blockoverride "properties" {
				enabled = "[IsValid( State.IncorporateState )]"
				onclick = "[Execute( State.IncorporateState )]"
				tooltip = "TOOLTIP_INCORPORATE_STATE"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/state_status_icons/incorporated_state.dds"
			}

			blockoverride "text" {
				text = "STATE_RIGHT_CLICK_MENU_INCORPORATE"
			}
		}
		
		right_click_menu_item = {
			visible = "[IsValid(State.UnincorporateState)]"
			blockoverride "properties" {
				onclick = "[PopupManager.AskConfirmation( State.UnincorporateState )]"
				tooltip = "TOOLTIP_CANCEL_INCORPORATION"
			}
			
			blockoverride "texture" {
				texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
			}

			blockoverride = "text" {
				text = "STATE_RIGHT_CLICK_MENU_CANCEL_INCORPORATION"
			}
		}

		right_click_menu_item = {
            blockoverride "properties" {
                tooltip = "DESIGNATE_STRATEGIC_OBJECTIVE_RIGHT_CLICK_ADD_TOOLTIP"
                visible = "[And( Not( State.IsStrategicObjective( GetMetaPlayer.GetPlayedOrObservedCountry ) ), IsValid( State.DesignateStrategicObjective ) ) ]"
                onclick = "[Execute( State.DesignateStrategicObjective )]"
            }

            blockoverride "margin" {
				margin_left = 55
			}
			
			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/designate_strategic_objective_lens_option.dds"
			}

            blockoverride "text" {
                text = "DESIGNATE_STRATEGIC_OBJECTIVE_RIGHT_CLICK_ADD"
            }
        }

        right_click_menu_item = {
            blockoverride "properties" {
                tooltip = "DESIGNATE_STRATEGIC_OBJECTIVE_RIGHT_CLICK_REMOVE_TOOLTIP"
                visible = "[And( State.IsStrategicObjective( GetMetaPlayer.GetPlayedOrObservedCountry ), IsValid( State.DesignateStrategicObjective ) ) ]"
                onclick = "[Execute( State.DesignateStrategicObjective )]"
            }

            blockoverride "margin" {
				margin_left = 55
			}
			
			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/designate_strategic_objective_lens_option.dds"
			}

            blockoverride "text" {
                text = "DESIGNATE_STRATEGIC_OBJECTIVE_RIGHT_CLICK_REMOVE"
            }
        }

        right_click_menu_item = {
            blockoverride "properties" {
                tooltip = "[State.GetPlanNavalInvasionDesc]"
                enabled = "[State.IsValidNavalInvasionPlanTarget]"
                visible = "[State.GetCountry.IsAtWarWith(GetPlayer.Self)]"
                onclick = "[PopupManager.ShowNavalInvasionPlannerPopup(State.Self)]"
            }

            blockoverride "margin" {
                margin_left = 55
            }

            blockoverride "texture" {
                texture = "gfx/interface/icons/formation_order_icons/naval_invasion.dds"
            }

            blockoverride "text" {
                text = "plan_naval_invasion_lens_option"
            }
        }
		
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "[State.GetStateRegion.GetColonizeTooltip]"
				visible = "[IsValid( State.GetStateRegion.Colonize )]"
				onclick = "[GetLensToolbar.ActivateOption( 'establish_colony' )]"
				onclick = "[Execute( State.GetStateRegion.Colonize )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/establish_colony.dds"
			}
			
			blockoverride "text" {
				text = "STATE_RIGHT_CLICK_MENU_COLONIZE"
			}	
		}

		### DECREES
		right_click_menu_dropdown = {
			visible = "[And(Or(Not(IsDataModelEmpty(State.AccessDecrees)), Not(IsDataModelEmpty(State.GetPotentialDecrees))), State.GetCountry.IsLocalPlayer)]"

			blockoverride "section_header_tooltip" {
				tooltip = "DECREES_IN_STATE"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "concept_decrees"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [Add_int32(GetDataModelSize(State.AccessDecrees), GetDataModelSize(State.GetPotentialDecrees))]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_state_decrees_in_right_click_menus')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_state_decrees_in_right_click_menus'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_state_decrees_in_right_click_menus')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_state_decrees_in_right_click_menus')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[State.AccessDecrees]"
			}

			blockoverride "properties" {
				onclick = "[Execute(Decree.GetRemoveCommand)]"
				enabled = "[IsValid(Decree.GetRemoveCommand)]"
				tooltip = "[Decree.GetTooltip]"
				visible = "[ObjectsEqual(Decree.GetCountry.Self, GetPlayer.Self)]"
				onclick = "[GetVariableSystem.Toggle('show_state_decrees_in_right_click_menus')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "texture" {
				texture = "[Decree.GetTexture]"
			}

			blockoverride "text" {
				text = "DECREE_REMOVE"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}

			blockoverride "additional_dropdown_items_after_gridbox" {
				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_state_decrees_in_right_click_menus')]"
					datamodel = "[State.GetPotentialDecrees]"

					item = {
						right_click_menu_item = {
							blockoverride "properties" {
								onclick = "[Execute(DecreeType.GetSetCommand(State.Self))]"
								enabled = "[IsValid(DecreeType.GetSetCommand(State.Self))]"
								tooltip = "[DecreeType.GetTooltipForState( State.Self )]"
								onclick = "[GetVariableSystem.Toggle('show_state_decrees_in_right_click_menus')]" # This is here in order to not close the dropdown when clicked.
							}
							
							blockoverride "margin" {
								margin_left = 55
							}

							blockoverride "text" {
								text = "[DecreeType.GetName]"
							}

							blockoverride "texture" {
								texture = "[DecreeType.GetTexture]"
							}			
						}
					}
				}
			}
		}

		### ALL GENERAL DIPLOMATIC DEMANDS TARGETING THIS STATE
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(State.GetPotentialDiploPlays))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_STATE_DIPLOMATIC_DEMANDS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "DIPLOMATIC_DEMANDS_IN_STATE_TEXT"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(State.GetPotentialDiploPlays)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_state_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_state_diplomatic_demands_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_state_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_state_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[State.GetPotentialDiploPlays]"
			}

			blockoverride "properties" {
				tooltip = "[DiplomaticPlayType.GetStartTooltipState(GetPlayer,State.Self)]"
				onclick = "[DiplomaticPlayType.ShowConfirmationState(State.Self)]"
				using = confirm_button_sound
				onclick = "[GetVariableSystem.Toggle('show_state_diplomatic_demands_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
				onclick = "[RightClickMenuManager.Close]"
			}

			blockoverride "texture" {
				texture = "[DiplomaticPlayType.GetTexture]"
			}

			blockoverride "text" {
				text = "[DiplomaticPlayType.GetName]"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		right_click_menu_item = {
			visible = "[GetMetaPlayer.IsObserver]"
			datacontext = "[State.AccessOwner]"

			blockoverride "properties" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE_TOOLTIP"
				onclick = "[ToggleObserveCountry(Country.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/observer_mode_icon.dds"
			}
			
			blockoverride "text" {
				text = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE"
			}
		}
		
		textbox = {
			text = "STATE_RIGHT_CLICK_MENU_STRATEGIC_REGION_TITLE"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			margin_left = 10
			visible = "[IsValid( GetPlayer.DeclareInterest( State.GetStateRegion.GetStrategicRegion ) )]"
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "[SelectLocalization( GetPlayer.HasDeclaredInterest( State.GetStateRegion.GetStrategicRegion ), 'STATE_RIGHT_CLICK_MENU_REVOKE_INTEREST_TOOLTIP', 'STATE_RIGHT_CLICK_MENU_DECLARE_INTEREST_TOOLTIP' )]"
				visible = "[IsValid( GetPlayer.DeclareInterest( State.GetStateRegion.GetStrategicRegion ) )]"
				onclick = "[Execute( GetPlayer.DeclareInterest( State.GetStateRegion.GetStrategicRegion ) )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/declare_interest.dds"
			}
			
			blockoverride "text" {
				text = "[SelectLocalization( GetPlayer.HasDeclaredInterest( State.GetStateRegion.GetStrategicRegion ), 'STATE_RIGHT_CLICK_MENU_REVOKE_INTEREST', 'STATE_RIGHT_CLICK_MENU_DECLARE_INTEREST' )]" 
			}	
		}
	}
}

types country_right_click_menu {
	type country_right_click_menu_items = flowcontainer {
		direction = vertical

		right_click_menu_item = {
			visible = "[Not(Country.IsLocalPlayer)]"
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'diplomacy')]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/main_hud/dip_btn.dds"
			}
			
			blockoverride = "text" {
				text = "STATE_RIGHT_CLICK_MENU_DIPLOMACY"
			}	
		}

		### KICK BLOC MEMBER
		right_click_menu_item = {
			visible = "[Country.GetPowerBloc.IsLeader(GetPlayer.Self)]"
			tooltip = "POWER_BLOC_KICK_MEMBER_TOOLTIP"

			blockoverride "properties" {
				onclick = "[PopupManager.AskConfirmation(Country.GetPowerBloc.Kick(Country.Self))]"
				enabled = "[IsValid(Country.GetPowerBloc.Kick(Country.Self))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/kick_out.dds"
			}
			
			blockoverride = "text" {
				text = "POWER_BLOC_KICK_MEMBER"
			}	
		}

		### SUBJECT ---> OVERLORD INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[GetPlayer.IsSubjectOf(Country.Self)]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_SUBJECT_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "SUBJECT_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllSubjectDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_subject_actions_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_subject_actions_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_subject_actions_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_subject_actions_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllSubjectDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_subject_actions_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}
		
		### POWER BLOC LEADER INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[And(GetPlayer.GetPowerBloc.IsLeader(GetPlayer.Self), Not(IsDataModelEmpty(Country.GetAllPowerBlocLeaderDiploActions)))]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_BLOC_LEADER_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "BLOC_LEADER_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllPowerBlocLeaderDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_bloc_leader_actions_right_click_dropdown')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_bloc_leader_actions_right_click_dropdown'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_bloc_leader_actions_right_click_dropdown')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_bloc_leader_actions_right_click_dropdown')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllPowerBlocLeaderDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_bloc_leader_actions_right_click_dropdown')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}		

		### POWER BLOC MEMBER INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[And(GetPlayer.GetPowerBloc.IsMember(Country.Self), Not(IsDataModelEmpty(Country.GetAllPowerBlocMemberDiploActions)))]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_BLOC_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "BLOC_MEMBER_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllPowerBlocMemberDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_bloc_member_actions_right_click_dropdown')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_bloc_member_actions_right_click_dropdown'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_bloc_member_actions_right_click_dropdown')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_bloc_member_actions_right_click_dropdown')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllPowerBlocMemberDiploActions]"
			}	

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_bloc_member_actions_right_click_dropdown')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### OVERLORD ---> SUBJECT INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[Country.IsSubjectOf(GetPlayer.Self)]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_OVERLORD_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "OVERLORD_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllOverlordDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_overlord_actions_right_click_dropdown')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_overlord_actions_right_click_dropdown'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_overlord_actions_right_click_dropdown')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_overlord_actions_right_click_dropdown')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllOverlordDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_overlord_actions_right_click_dropdown')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### GENERAL DIPLOMATIC ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetAllGeneralDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_DIPLOMATIC_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "DIPLOMATIC_ACTIONS_TEXT"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllGeneralDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_actions_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_diplomatic_actions_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_actions_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_actions_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllGeneralDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_actions_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### ALL GENERAL DIPLOMATIC DEMANDS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialDiploPlays))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_DIPLOMATIC_DEMANDS_TOOLTIP"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialDiploPlays)]#!"
				}
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "DIPLOMATIC_DEMANDS_TEXT"
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_diplomatic_demands_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetPotentialDiploPlays]"
			}

			blockoverride "properties" {
				tooltip = "[DiplomaticPlayType.GetStartTooltipCountry(GetPlayer, Country.Self)]"
				onclick = "[DiplomaticPlayType.ShowConfirmationCountry(Country.Self)]"
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_demands_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
				onclick = "[RightClickMenuManager.Close]"
			}

			blockoverride "sound" {
				using = diplomatic_play_confirmation_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticPlayType.GetTexture]"
			}

			blockoverride "text" {
				text = "[DiplomaticPlayType.GetName]"
			}
			
			blockoverride "item_margin" {
				margin_left = 55
			}
		}
	}
}

right_click_menu = {
	name = "country_right_click_menu"

	blockoverride "title_text" {
		text = "STATE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "header_text" {} #no header for state menu, handle in items instead

	blockoverride "items" {
		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10

				tiny_flag = {
					parentanchor = vcenter
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = left|nobaseline
					text = "STATE_RIGHT_CLICK_MENU_COUNTRY_TITLE"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'default')]"
					tooltip = "GO_TO_BUTTON_COUNTRY"
					input_action = "go_to_details"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				button_icon_zoom = {
					parentanchor = vcenter
					size = { 28 28 }
					tooltip = "ZOOM_TO_CAPITAL_STATE"
					onclick = "[Country.AccessCapital.ZoomToCapital]"
					enabled = "[Not( Country.AccessCapital.IsZoomingToCapital )]"
				}

				button_icon_toggle_pin = {
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "COUNTRY_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(Country.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[Country.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[Country.TogglePinInOutliner]"
					}
				}
			}
		}

		widget = { size = { 4 4 }} #pixelpushing tweak for flag, hack due to parentanchor and margins interacting weird

		country_right_click_menu_items = {}

		widget = { size = { 10 10 }}

		right_click_menu_item = {
			visible = "[GetMetaPlayer.IsObserver]"
			blockoverride "properties" {

				tooltip = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE_TOOLTIP"
				onclick = "[ToggleObserveCountry(Country.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/observer_mode_icon.dds"
			}
			
			blockoverride "text" {
				text = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE"
			}
		}
	}
}

right_click_menu = {
	name = "political_movement_right_click_menu"

	blockoverride "title_text" {
		text = "[PoliticalMovement.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}
			
			blockoverride "text" {
				text = "INFORMATION"
			}
		}

		right_click_menu_item = {
			visible = "[ObjectsEqual(PoliticalMovement.GetCountry.Self, GetPlayer.Self)]"

			blockoverride "properties" {
				onclick = "[PoliticalMovement.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[PoliticalMovement.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(PoliticalMovement.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride = "text" {
				text = "POLITICAL_MOVEMENT_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}
	}
}

right_click_menu = {
	name = "power_bloc_right_click_menu"

	blockoverride "title_text" {
		text = "[PowerBloc.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenPowerBlocPanel(PowerBloc.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride "text" {
				text = "INFORMATION"
			}
		}
	}
}

right_click_menu = {
	name = "diplomatic_play_right_click_menu"

	blockoverride "title_text" {
		text = "[DiplomaticPlay.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenDiplomaticPlayPanelTab( DiplomaticPlay.AccessSelf, 'default' )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}
			
			blockoverride "text" {
				text = "INFORMATION"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[DiplomaticPlay.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[DiplomaticPlay.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(DiplomaticPlay.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride = "text" {
				text = "DIPLOMATIC_PLAY_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}

		flowcontainer = {
			margin_top = 10
			direction = vertical

			# INITIATOR ACTIONS
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportInitiator(GetPlayer)]"
					tooltip = "SUPPORT_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[Execute(DiplomaticPlay.SupportInitiator(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
					mirror = horizontal
				}
				
				blockoverride = "text" {
					text = "SUPPORT_INITIATOR"
				}
			}
			
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportInitiator(GetPlayer)]"
					tooltip = "SUPPORT_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.SupportInitiator(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
					mirror = horizontal
				}
				
				blockoverride = "text" {
					text = "SUPPORT_INITIATOR"
				}
			}
			
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"		
					enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
					onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetInitiator )]"
					tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/information.dds"
				}
				
				blockoverride = "text" {
					text = "REVERSE_SWAY_INITIATOR"
				}
			}
			

			# TARGET ACTIONS
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportTarget(GetPlayer)]"
					tooltip = "SUPPORT_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[Execute(DiplomaticPlay.SupportTarget(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
				}
				
				blockoverride = "text" {
					text = "SUPPORT_TARGET"
				}
			}
			
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportTarget(GetPlayer)]"
					tooltip = "SUPPORT_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.SupportTarget(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
				}
				
				blockoverride = "text" {
					text = "SUPPORT_TARGET"
				}
			}
			
			right_click_menu_item = {
				blockoverride "properties" {
					enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
					onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetTarget )]"
					tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
					visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/information.dds"
				}
				
				blockoverride = "text" {
					text = "REVERSE_SWAY_TARGET"
				}
			}
		}

		### ACTION BUTTONS
		flowcontainer = {
			visible = "[DiplomaticPlay.IsInvolved(GetPlayer)]"
			direction = vertical
			
			right_click_menu_item = {
				visible = "[And( DiplomaticPlay.IsInitiator(GetPlayer), Not( IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))))]"
				blockoverride "properties" {
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
					enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/capitulate.dds"
				}
				
				blockoverride = "text" {
					text = "DIPLO_PLAY_BACK_DOWN"
				}
			}

			right_click_menu_item = {
				visible = "[And( DiplomaticPlay.IsTarget(GetPlayer), Not( IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))))]"
				blockoverride "properties" {
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
					enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/capitulate.dds"
				}
				
				blockoverride = "text" {
					text = "DIPLO_PLAY_GIVE_IN"
				}
			}

			right_click_menu_item = {
				visible = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
				blockoverride "properties" {
					onclick = "[Execute( DiplomaticPlay.SwitchSide( GetPlayer ))]"
					tooltip = "DIPLOMATIC_PLAY_SWITCH_COUNTRY_TOOLTIP"
					enabled = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/toggle.dds"
				}
				
				blockoverride = "text" {
					text = "DIPLOMATIC_PLAY_SWITCH_COUNTRY"
				}
			}

			right_click_menu_item = {
				visible = "[And( Not( DiplomaticPlay.IsInitiator(GetPlayer) ), Not( DiplomaticPlay.IsTarget(GetPlayer) ))]"
				blockoverride "properties" {
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.DeclareNeutrality(GetPlayer))]"
					tooltip = "DECLARE_NEUTRALITY_DIPLOMATIC_PLAY_TOOLTIP"
					enabled = "[DiplomaticPlay.CanDeclareNeutrality(GetPlayer)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_on_the_fence.dds"
				}
				
				blockoverride = "text" {
					text = "DIPLO_PLAY_DECLARE_NEUTRALITY"
				}
			}
		}
	}
}

right_click_menu = {
	name = "overlord_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "OVERLORD_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllOverlordDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			datamodel = "[Country.GetAvailableOverlordDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### POTENTIAL OVERLORD ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialOverlordDiploActions))]"
			
			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_OVERLORD_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_OVERLORD_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialOverlordDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_overlord_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_overlord_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_overlord_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_overlord_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_overlord_actions')]"
					datamodel = "[Country.GetPotentialOverlordDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "subject_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "SUBJECT_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllSubjectDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			visible = "[Not(IsDataModelEmpty(Country.GetAllSubjectDiploActions))]"
			datamodel = "[Country.GetAvailableSubjectDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### POTENTIAL SUBJECT ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialSubjectDiploActions))]"
			
			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_SUBJECT_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_SUBJECT_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialSubjectDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_subject_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_subject_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_subject_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_subject_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_subject_actions')]"
					datamodel = "[Country.GetPotentialSubjectDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "bloc_leader_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "BLOC_LEADER_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllPowerBlocLeaderDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			datamodel = "[Country.GetAvailablePowerBlocLeaderDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### UNAVAILABLE BLOC LEADER ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialPowerBlocLeaderDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_BLOC_LEADER_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_BLOC_LEADER_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialPowerBlocLeaderDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_bloc_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_bloc_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
					datamodel = "[Country.GetPotentialPowerBlocLeaderDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "bloc_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "BLOC_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllPowerBlocMemberDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			datamodel = "[Country.GetAvailablePowerBlocMemberDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### UNAVAILABLE BLOC MEMBER ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialPowerBlocMemberDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_BLOC_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_BLOC_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialPowerBlocMemberDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_bloc_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_bloc_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
					datamodel = "[Country.GetPotentialPowerBlocMemberDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "customization_option_items_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		raw_text = "Select a #v Statue Pattern#!" # TODO PRCAL-32207: statue customization
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[DataModelRepeatedItem('(int32)12')]" # TODO PRCAL-32207: statue customization
			datamodel_wrap = 5
			flipdirection = yes

			item = {
				customization_option_item = {}
			}
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "power_bloc_coa_pieces_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "POWER_BLOC_COA_SELECT_ITEM"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[PowerBlocCoaPieceSelector.GetItems]"
			datamodel_wrap = 4
			flipdirection = yes

			item = {
				power_bloc_coa_piece_item = {}
			}
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "power_bloc_map_texture_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "POWER_BLOC_MAP_TEXTURE_SELECT_ITEM"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[PowerBlocMapTextureSelector.GetItems]"
			datamodel_wrap = 4
			flipdirection = yes

			item = {
				power_bloc_map_texture_item = {}
			}
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "color_picker_right_click_menu"
	widgetanchor = bottom|left

	blockoverride "title_text" {
		text = "COLOR_PICKER_HEADER"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		colorpicker_simple = {
			color = "[DataColorPicker.GetColor]"
			oncoloredited = "[DataColorPicker.OnColorEdited]"
		}

		button = {
			parentanchor = hcenter
			size = { 300 50 }
			using = default_button_action
			onclick = "[RightClickMenuManager.Close]"
			text = "DONE"
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "market_right_click_menu"

	blockoverride "title_text" {
		text = "MARKET_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[Market.AccessMarketCapital.ZoomToCapital]"
				using = zoom_button_sound
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/location_finder.dds"
			}
			
			blockoverride "text" {
				text = "ZOOM_TO_MARKET_CAPITAL"
			}	
		}

		right_click_menu_item = {
			visible = "[Market.GetOwner.IsLocalPlayer]"
			blockoverride "properties" {
				onclick = "[Market.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Market.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Market.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride "text" {
				text = "MARKET_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}		
		}
	}
}

right_click_menu = {
	name = "goods_right_click_menu"
	
	blockoverride "title_text" {
		text = "GOODS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Not(Goods.IsTaxed(GetPlayer))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax_not.dds"
			}
			
			blockoverride "text" {
				text = "TAX_GOODS"
			}	
		}	

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Goods.IsTaxed(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax.dds"
			}
			
			blockoverride "text" {
				text = "UNTAX_GOODS"
			}		
		}		
	
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescNoPriority(Goods.Self)]"
				visible = "[Goods.IsTradeable]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/unfocused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_NO_PRIORITY"
			}	
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescImportPriority(Goods.Self)]"
				visible = "[Goods.IsTradeable]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/import_focused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_IMPORT_PRIORITY"
			}	
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescExportPriority(Goods.Self)]"
				visible = "[Goods.IsTradeable]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/export_focused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_EXPORT_PRIORITY"
			}	
		}	

		goods_interactions = {}
	}
}

right_click_menu = {
	name = "goods_in_market_right_click_menu"
	
	blockoverride "title_text" {
		text = "GOODS_IN_MARKET_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			visible = "[Goods.HasMarketContext]"
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenGoodsPanel(Goods.GetMarket, Goods.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}
			
			blockoverride = "text" {
				text = "INFORMATION"
			}	
		}
		right_click_menu_item = {
			blockoverride "properties" {
				visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Goods.GetMarket.GetOwner.IsLocalPlayer))]"
				enabled = "[Goods.CanEstablishImportTradeRoute]"
				onclick = "[Goods.EstablishImportTradeRoute]"
				tooltip = "ESTABLISH_IMPORT_ROUTE_TOOLTIP"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
			}
			
			blockoverride "text" {
				text = "ESTABLISH_IMPORT_ROUTE"
			}	
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Goods.GetMarket.GetOwner.IsLocalPlayer))]"
				enabled = "[Goods.CanEstablishExportTradeRoute]"
				onclick = "[Goods.EstablishExportTradeRoute]"
				tooltip = "ESTABLISH_EXPORT_ROUTE_TOOLTIP"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
			}
			
			blockoverride "text" {
				text = "ESTABLISH_EXPORT_ROUTE"
			}	
		}

		right_click_menu_item = {
			blockoverride "properties" {
				visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Not(Goods.GetMarket.GetOwner.IsLocalPlayer)))]"
				enabled = "[IsValid(Goods.EstablishTradeRouteWithPlayerMarket('(bool)yes'))]"
				onclick = "[Execute(Goods.EstablishTradeRouteWithPlayerMarket('(bool)yes'))]"
				tooltip = "ESTABLISH_IMPORT_ROUTE_TO_PLAYER_MARKET_TOOLTIP"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
			}
			
			blockoverride "text" {
				text = "ESTABLISH_IMPORT_ROUTE_TO_PLAYER_MARKET"
			}	
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Not(Goods.GetMarket.GetOwner.IsLocalPlayer)))]"
				enabled = "[IsValid(Goods.EstablishTradeRouteWithPlayerMarket('(bool)no'))]"
				onclick = "[Execute(Goods.EstablishTradeRouteWithPlayerMarket('(bool)no'))]"
				tooltip = "ESTABLISH_EXPORT_ROUTE_FROM_PLAYER_MARKET_TOOLTIP"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
			}
			
			blockoverride "text" {
				text = "ESTABLISH_EXPORT_ROUTE_FROM_PLAYER_MARKET"
			}	
		}

		right_click_menu_item = {
			visible = "[And(Goods.HasMarketContext, Goods.GetMarket.GetOwner.IsLocalPlayer)]"

			blockoverride "properties" {
				onclick = "[Goods.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Goods.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Goods.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}
			
			blockoverride = "text" {
				text = "GOODS_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}		
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescNoPriority(Goods.Self)]"
				visible = "[And(Goods.IsTradeable, ObjectsEqual(Goods.GetMarket.GetOwner, GetPlayer.Self))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/unfocused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_NO_PRIORITY"
			}		
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescImportPriority(Goods.Self)]"
				visible = "[And(Goods.IsTradeable, ObjectsEqual(Goods.GetMarket.GetOwner, GetPlayer.Self))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/import_focused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_IMPORT_PRIORITY"
			}			
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescExportPriority(Goods.Self)]"
				visible = "[And(Goods.IsTradeable, ObjectsEqual(Goods.GetMarket.GetOwner, GetPlayer.Self))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/export_focused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_EXPORT_PRIORITY"
			}	
		}	

		textbox = {
			text = "GOODS_IN_COUNTRY"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			margin_left = 10
			default_format = "#title"
			visible = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Not(Goods.IsTaxed(GetPlayer))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax_not.dds"
			}
			
			blockoverride "text" {
				text = "TAX_GOODS"
			}				
		}	

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Goods.IsTaxed(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax.dds"
			}
			
			blockoverride "text" {
				text = "UNTAX_GOODS"
			}	
		}

		goods_interactions = {}
	}
}

right_click_menu = {
	name = "trade_route_right_click_menu"
	
	blockoverride "title_text" {
		text = "[TradeRoute.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[Execute( TradeRoute.Cancel )]"
				visible = "[IsValid( TradeRoute.Cancel )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/close.dds"
			}
			
			blockoverride "text" {
				text = "TRADE_ROUTE_CANCEL"
			}		
		}		
	
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffNoPriority(TradeRoute.GetGoods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffNoPriority(TradeRoute.GetGoods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescNoPriority(TradeRoute.GetGoods.Self)]"
				visible = "[TradeRoute.IsOwnerOrMarketOwner(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/unfocused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_NO_PRIORITY"
			}		
		}
		
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffImportPriority(TradeRoute.GetGoods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffImportPriority(TradeRoute.GetGoods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescImportPriority(TradeRoute.GetGoods.Self)]"
				visible = "[TradeRoute.IsOwnerOrMarketOwner(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/import_focused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_IMPORT_PRIORITY"
			}		
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( GetPlayer.SetGoodsTariffExportPriority(TradeRoute.GetGoods.Self) )]"
				onclick = "[Execute( GetPlayer.SetGoodsTariffExportPriority(TradeRoute.GetGoods.Self) )]"
				tooltip = "[GetPlayer.GetGoodsTariffDescExportPriority(TradeRoute.GetGoods.Self)]"
				visible = "[TradeRoute.IsOwnerOrMarketOwner(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/export_focused.dds"
			}
			
			blockoverride "text" {
				text = "SET_GOODS_TARIFF_EXPORT_PRIORITY"
			}		
		}

		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetExportingMarket )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}
			
			blockoverride "text" {
				text = "TRADE_ROUTE_OPEN_EXPORTING_MARKET"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetImportingMarket )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}
			
			blockoverride "text" {
				text = "TRADE_ROUTE_OPEN_IMPORTING_MARKET"
			}	
		}					
	}
}

types right_click_menu {
	type goods_interactions = flowcontainer {
		direction = vertical 

		textbox = {
			text = "PRODUCED_IN"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			margin_left = 10
			default_format = "#title"
			visible = "[Not(IsDataModelEmpty(Goods.AccessBuildingsProducingThis))]"
		}

		flowcontainer = {
			datamodel = "[Goods.AccessBuildingsProducingThis]"
			direction = vertical

			item = {
				right_click_menu_item = {
					blockoverride "properties" {
						tooltipwidget = {
							FancyTooltip_BuildingType = {}
						}
						tooltip = "[SelectLocalization( GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' ), 'DATA_BUILDING_TYPE_NAME_TOOLTIP', 'DATA_BUILDING_TYPE_NAME_TOOLTIP_NO_STATES' )]"
						visible = "[BuildingType.IsExpandable]"
						onclick = "[BuildingType.ActivateExpansionLens]"
						enabled = "[GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' )]"
					}

					blockoverride "margin" {
						margin_left = 55
					}

					blockoverride "texture" {
						texture = "[BuildingType.GetTexture]"
					}
					
					blockoverride "text" {
						text = "EXPAND_BUILDING_TYPE"
					}
				}
			}
		}

		textbox = {
			text = "CONSUMED_IN"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			margin_left = 10
			default_format = "#title"
			visible = "[Not(IsDataModelEmpty(Goods.AccessBuildingsUsingThis))]"
		}

		flowcontainer = {
			datamodel = "[Goods.AccessBuildingsUsingThis]"
			direction = vertical

			item = {
				right_click_menu_item = {
					blockoverride "properties" {
						tooltipwidget = {
							FancyTooltip_BuildingType = {}
						}
						tooltip = "[SelectLocalization( GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' ), 'DATA_BUILDING_TYPE_NAME_TOOLTIP', 'DATA_BUILDING_TYPE_NAME_TOOLTIP_NO_STATES' )]"
						visible = "[BuildingType.IsExpandable]"
						enabled = "[GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' )]"
						onclick = "[BuildingType.ActivateExpansionLens]"
					}

					blockoverride "margin" {
						margin_left = 55
					}

					blockoverride "texture" {
						texture = "[BuildingType.GetTexture]"
					}
					
					blockoverride "text" {
						text = "EXPAND_BUILDING_TYPE"
					}	
				}
			}
		}
	}

	type grid_button = widget {
		size = { -1 120 }
		min_width = "[GetDefine('NGUI', 'LENS_TOOLBAR_ITEM_WIDTH')]"
		alwaystransparent = no
			
		button = {
			name = grid_button
			size = { -1 115 }
			min_width = "[GetDefine('NGUI', 'LENS_TOOLBAR_ITEM_WIDTH')]"
			parentanchor = bottom|hcenter
			using = tooltip_above

			block "default_button" {
				using = default_button_action
			}

			#mouse enter position animation
			onmousehierarchyenter = "[PdxGuiWidget.InterruptThenTriggerAnimation('action_button_mouse_leave','action_button_mouse_enter')]"
			onmousehierarchyleave = "[PdxGuiWidget.InterruptThenTriggerAnimation('action_button_mouse_enter','action_button_mouse_leave')]"

			block "properties" {
				onclick = "[RightClickMenuManager.Close]"
			}

			#mouse enter position
			state = {
				name = action_button_mouse_enter
				duration = 0.15
				position = { 0 -5 }
				using = Animation_Curve_Default
				on_start = "[PdxGuiWidget.FindChild('title').TriggerAnimation('show')]"
				on_start = "[PdxGuiWidget.FindChild('cost').TriggerAnimation('show')]"
			}
			state = {
				name = action_button_mouse_leave
				duration = 0.3
				position = { 0 0 }
				using = Animation_Curve_Default
				on_start = "[PdxGuiWidget.FindChild('title').TriggerAnimation('hide')]"
				on_start = "[PdxGuiWidget.FindChild('cost').TriggerAnimation('hide')]"
			}

			button = {
				name = "interaction_icon"
				size = { 60 60 }
				position = { 0 5 }
				gfxtype = buttongfx
				parentanchor = hcenter
				alwaystransparent = yes

				block "highlight_glow" {}

				icon = {
					size = { 50 50 }
					parentanchor = hcenter

					block "texture" {
						texture = "gfx/interface/icons/generic_icons/generic_concept_icon.dds"
					}
				}
			}

			textbox = {
				name = "title"
				align = hcenter|nobaseline
				position = { 0 -16 }
				size = { 100% 50 }
				parentanchor = hcenter|bottom
				using = fontsize_small
				elide = right
				multiline = yes
				margin_left = 5
				margin_right = 5
				alpha = 0.75
				
				block "text_middle" {
					raw_text = "#v Name of Interaction#!"
				}

				state = {
					name = show
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide
					alpha = 0.75
					duration = 0.3
					using = Animation_Curve_Default
				}
			}
			
			textbox = {
				name = "cost"
				align = center|nobaseline
				position = { 0 -3 }
				size = { 100% 20 }
				parentanchor = hcenter|bottom
				using = fontsize_small
				elide = right
				multiline = no
				margin_left = 5
				margin_right = 5
				alpha = 0.75

				block "text_bottom_visibility" {}

				block "text_bottom" {}

				state = {
					name = show
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide
					alpha = 0.75
					duration = 0.3
					using = Animation_Curve_Default
				}
			}

			icon = {
				block "highlight_visibility" {
					visible = no
				}

				using = highlighted_square_selection
			}
		}
	}

	type diplomatic_action_grid_button = grid_button {
		blockoverride "default_button" {
			using = default_button
		}

		blockoverride "properties" {
			enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
			onclick = "[DiplomaticAction.ExecuteWithConfirmation]"
			onclick = "[RightClickMenuManager.Close]"
			using = diplomatic_action_tooltip

			block "clicksound" {
				using = generic_diplomatic_action_sound
			}
		}

		blockoverride "highlight_glow" {
			icon = {
				visible = "[DiplomaticAction.IsActivePact]"
				parentanchor = center
				size = { 200% 200% }
				using = rotate_glow_animation_02
			}
		}

		blockoverride "texture" {
			texture = "[DiplomaticAction.GetType.GetTexture]"
		}

		blockoverride "text_middle" {
			text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			default_format = "#v"
		}

		blockoverride "text_bottom_visibility" {
			visible = "[GreaterThan_CFixedPoint(DiplomaticAction.GetMaintenanceCost, '(CFixedPoint)0')]"
		}

		blockoverride "text_bottom" {
			raw_text = "#v [DiplomaticAction.GetMaintenanceCostFormatted]#!"
		}

		blockoverride "highlight_visibility" {
			visible = "[DiplomaticAction.IsActivePact]"
		}
	}
}

template standard_formation_item_size {
	size = { 345 80 }
}

